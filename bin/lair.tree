/* lair.tree generated by valac 0.36.3-dirty, do not modify. */

namespace LAIR {
	[CCode (cheader_filename = "src/main.h")]
	internal class Lair : LAIR.Scribe {
		private static LAIR.Game GameMap;
		private static bool help;
		private static string ImageFilePath;
		private static string SoundFilePath;
		private static string FontsFilePath;
		private static string MapGenLua;
		private static string PlayerConfig;
		private static string AiConfig;
		public Lair (string[] lspt, string[] scrpt, string mapSize, int screenW, int screenH, int verbosity) {
			base.new_local_attributes (verbosity, "global log: ");
			if (!help) {
				if (SDL.init (SDL.InitFlag.EVERYTHING | SDLImage.InitFlags.ALL) > 0) {
				}
				if (SDLImage.init (SDLImage.InitFlags.PNG) < 0) {
				}
				SDLTTF.init ();
				GameMap = new LAIR.Game (lspt, scrpt, mapSize, screenW, screenH);
				GameMap.run ();
			} else {
				message ("main.vala:31: ***********************************************************************************");
				message ("main.vala:32: <I      <I I>         <I I>      I>");
				message ("main.vala:33:  |       | |           | |       |");
				message ("main.vala:34: <^^>____<^^^>_________<^^^>____<^^>");
				message ("main.vala:35:  || L        A    IIIII RRRRR   ||");
				message ("main.vala:36:  || L       A A     I   R    R  ||");
				message ("main.vala:37:  || L      AAAAA    I   RRRRR   ||");
				message ("main.vala:38:  || LLLLL A     A IIIII R    R  ||");
				message ("main.vala:39: <vv>___________________________<vv>");
				message ("main.vala:40: This is a game called LAIR, a free, self-hosted, worldbuilding, procedurally");
				message ("main.vala:41: generated 2D survival RPG. It can be played in a wide variety of ways, as");
				message ("main.vala:42: everything from a coffee-break roguelike to a political strategy game. The");
				message ("main.vala:43: following options can be used to configure it at runtime. For more information,");
				message ("main.vala:44: please see the manual as soon as I finish writing it.");
				message ("main.vala:45: ----------------------------");
				message ("main.vala:46:      -i : display this info");
				message ("main.vala:47:      -p : path to the image file listing");
				message ("main.vala:48:      -s : path to the sound file listing");
				message ("main.vala:49:      -f : path to the fonts file listing");
				message ("main.vala:50:      -m : map size(tiny, small, medium, large, giant");
				message ("main.vala:51:      -c : path to map generation script");
				message ("main.vala:52:      -e : path to character generation script");
				message ("main.vala:53:      -a : path to ai library script");
				message ("main.vala:54:      -w : log output verbosity");
				message ("main.vala:55:      -w : screen width");
				message ("main.vala:56:      -h : screen height");
				message ("main.vala:57: ***********************************************************************************");
			}
		}
		public static string get_file_path (string path) {
			GLib.File DEFAULT = File.new_for_path ("/usr/share/" + path);
			GLib.File TEST = File.new_for_path (Environment.get_user_config_dir () + path);
			GLib.File RETURN = File.new_for_path (path);
			if (!RETURN.query_exists (null)) {
				if (TEST.query_exists (null)) {
					RETURN = File.new_for_path (TEST.get_path ());
				} else {
					if (DEFAULT.query_exists (null)) {
						RETURN = File.new_for_path (DEFAULT.get_path ());
					}
				}
			}
			return RETURN.get_path ();
		}
		public static int goodbye () {
			message ("main.vala:77: ***********************************************************************************");
			message ("main.vala:78: <I      <I I>         <I I>      I>");
			message ("main.vala:79:  |       | |           | |       |");
			message ("main.vala:80: <^^>____<^^^>_________<^^^>____<^^>");
			message ("main.vala:81:  || L        A    IIIII RRRRR   ||");
			message ("main.vala:82:  || L       A A     I   R    R  ||");
			message ("main.vala:83:  || L      AAAAA    I   RRRRR   ||");
			message ("main.vala:84:  || LLLLL A     A IIIII R    R  ||");
			message ("main.vala:85: <vv>___________________________<vv>");
			message ("main.vala:86: ----------------------------");
			message ("main.vala:87:    Goodbye!                 ");
			message ("main.vala:88: ----------------------------");
			message ("main.vala:89: ***********************************************************************************");
			return 0;
		}
		public static int main ((unowned string)[] args) {
			ImageFilePath = get_file_path ("lair/images.list");
			SoundFilePath = get_file_path ("lair/sounds.list");
			FontsFilePath = get_file_path ("lair/fonts.list");
			MapGenLua = get_file_path ("lair/demo/dungeon.lua");
			PlayerConfig = get_file_path ("lair/demo/player.lua");
			AiConfig = get_file_path ("lair/demo/ai.lua");
			GLib.List<string>? Arguments = new GLib.List<string> ();
			string? MapSize = "tiny";
			int PixelW = 800;
			int PixelH = 600;
			int Verbosity = 0;
			bool save = false;
			{
				int index = 0;
				{
					bool .76 = true;
					loop {
						if (!.76) {
							index++;
						}
						.76 = false;
						if (!index < Arguments.length ()) {
							break;
						}
						switch (Arguments.nth_data (index)) {
						case "-i":
						{
							help = true;
							break;
						}
						case "-l":
						{
							save = true;
							break;
						}
						case "-p":
						{
							ImageFilePath = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-s":
						{
							SoundFilePath = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-f":
						{
							FontsFilePath = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-m":
						{
							MapSize = Arguments.nth_data (index + 1);
							break;
						}
						case "-c":
						{
							MapGenLua = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-e":
						{
							PlayerConfig = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-a":
						{
							AiConfig = get_file_path (Arguments.nth_data (index + 1));
							break;
						}
						case "-v":
						{
							Verbosity = int.parse (Arguments.nth_data (index + 1));
							break;
						}
						case "-w":
						{
							PixelW = int.parse (Arguments.nth_data (index + 1));
							break;
						}
						case "-h":
						{
							PixelH = int.parse (Arguments.nth_data (index + 1));
							break;
						}
						default:
						{
							break;
						}
						}
					}
				}
			}
			set_log_level (Verbosity);
			message ("main.vala:151: Image file path from options: %s ", ImageFilePath);
			message ("main.vala:152: Sound file path from options: %s ", SoundFilePath);
			message ("main.vala:153: Font file path from options: %s ", FontsFilePath);
			message ("main.vala:154: Dungeon file path from options: %s ", MapGenLua);
			message ("main.vala:155: Player file path from options: %s ", PlayerConfig);
			message ("main.vala:156: AI file path from options: %s ", AiConfig);
			string[]? listPaths = new string[3] { ImageFilePath, SoundFilePath, FontsFilePath };
			string[]? scriptPaths = new string[3] { MapGenLua, PlayerConfig, AiConfig };
			LAIR.Lair app = new LAIR.Lair (listPaths, scriptPaths, MapSize, PixelW, PixelH, Verbosity);
			return app.goodbye ();
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Net : LAIR.Scribe {
		public Net () {
			base.new_local_attributes (2, "player: ");
		}
		public Net.Service () {
			base.new_local_attributes (2, "dungeon: ");
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class LuaConf : LAIR.LuaGlobal {
		private string ScriptPath;
		public LuaConf (string lua_ai_path = "immobile", int lua_log_level = 1, string name = "Local lua VM: ") {
			base (lua_ai_path, lua_log_level, name);
			@this.ScriptPath = lua_ai_path;
			if (@this.does_it_ai ()) {
				message ("luaconf.vala:10: Loading a script: %s", @this.ScriptPath);
				@this.lua_do_file ();
			}
		}
		private void lua_do_file () {
			if (@this.does_it_ai ()) {
				if (@this.ScriptPath != "immobile") {
					@this.global_vm_copy ().do_file (@this.ScriptPath);
				}
			}
		}
		private void lua_new_table () {
			if (@this.does_it_ai ()) {
				if (@this.ScriptPath != "immobile") {
					@this.global_vm_copy ().new_table ();
				}
			}
		}
		private void lua_push_named_number (string key, int val = -2147483647) {
			if (val != -2147483647) {
				if (@this.does_it_ai ()) {
					if (key != null) {
						@this.global_vm_copy ().push_string (key);
						@this.global_vm_copy ().push_number (val);
						@this.global_vm_copy ().raw_set (-3);
					} else {
						key = "error";
						string? errval = "Error pushing entry to global Lua table. Key was null. Value was: " + val.to_string ("%i");
						message ("luaconf.vala:38: %s", errval);
						@this.global_vm_copy ().push_string (key);
						@this.global_vm_copy ().push_string (errval);
						@this.global_vm_copy ().raw_set (-3);
					}
				}
			}
		}
		private void lua_push_named_strings (GLib.List<string> vals) {
			if (@this.does_it_ai ()) {
				int key = 0;
			}
		}
		private void lua_close_table (string tableName) {
			if (@this.does_it_ai ()) {
				if (tableName != null) {
					@this.global_vm_copy ().set_global (tableName);
				} else {
					message ("luaconf.vala:70: something is wrong, table name cannot be null");
				}
			}
		}
		protected GLib.List<string> get_lua_last_return () {
			string? tmp = "";
			GLib.List<string>? tr = null;
			if (@this.does_it_ai ()) {
				if (@this.global_vm_copy ().get_top () > 0) {
					tr = new GLib.List<string> ();
					if (@this.global_vm_copy ().is_number (-1)) {
						double number = @this.global_vm_copy ().to_number (-1);
						tmp = tmp + number.to_string ();
						@this.global_vm_copy ().pop (1);
					} else {
						if (@this.global_vm_copy ().is_string (-1)) {
							string? word = @this.global_vm_copy ().to_string (-1);
							tmp = tmp + word;
							@this.global_vm_copy ().pop (1);
						} else {
							if (@this.global_vm_copy ().is_boolean (-1)) {
								bool word = @this.global_vm_copy ().to_boolean (-1);
								tmp = tmp + word.to_string ();
								@this.global_vm_copy ().pop (1);
							}
						}
					}
				}
				message ("luaconf.vala:94:  %s ", tmp);
				string[]? tl = tmp.split (" ", 0);
				{
					int i = 0;
					{
						bool .29 = true;
						loop {
							if (!.29) {
								i++;
							}
							.29 = false;
							if (!i < tl.length) {
								break;
							}
							if (tl[i] != null) {
								message ("luaconf.vala:98:  %s ", tl[i]);
								tr.append (tl[i]);
							}
						}
					}
				}
			}
			return tr;
		}
		protected void lua_do_function (string function) {
			if (@this.does_it_ai ()) {
				string? tmp = "return " + function;
				@this.global_vm_copy ().do_string (tmp);
			}
		}
		protected void lua_push_uint_to_table (string tablename = "none", string varname = "none", int varval = -2147483647) {
			if (tablename != "none") {
				if (tablename != "none") {
					if (@this.does_it_ai ()) {
						@this.lua_new_table ();
						message ("luaconf.vala:117: Creating new Lua table: %s.", tablename);
						message ("luaconf.vala:118:  Containing field: %s.", varname);
						message ("luaconf.vala:119:  of value: %s.", varval.to_string ("%i"));
						@this.lua_push_named_number (varname, varval);
						@this.lua_close_table (tablename);
					}
				}
			}
		}
		protected void lua_push_coords (LAIR.AutoPoint current, LAIR.AutoPoint simplecurrent) {
			if (@this.does_it_ai ()) {
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", current.x ());
				@this.lua_close_table ("generator_x");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", current.y ());
				@this.lua_close_table ("generator_y");
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", simplecurrent.x ());
				@this.lua_close_table ("generator_coarse_x");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", simplecurrent.y ());
				@this.lua_close_table ("generator_coarse_y");
			}
		}
		protected void lua_push_string_to_table (string tablename, string val = "none") {
			if (val != "none") {
				if (@this.does_it_ai ()) {
					@this.lua_new_table ();
					@this.global_vm_copy ().push_string (tablename);
					@this.global_vm_copy ().push_string (val);
					@this.global_vm_copy ().raw_set (-3);
					@this.lua_close_table (tablename);
				}
			}
		}
		protected void lua_push_strings_to_table (string tablename = "none", GLib.List<string> varvals = null) {
			if (tablename != "none") {
				if (varvals != null) {
					if (@this.does_it_ai ()) {
						@this.lua_new_table ();
						@this.lua_push_named_strings (varvals);
						@this.lua_close_table (tablename);
					}
				}
			}
		}
		protected void lua_push_dimensions (SDL.Video.Rect current) {
			if (@this.does_it_ai ()) {
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", (int) current.x);
				@this.lua_close_table ("room_x");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", (int) current.y);
				@this.lua_close_table ("room_y");
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", (int) current.x / 32);
				@this.lua_close_table ("room_coarse_x");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", (int) current.y / 32);
				@this.lua_close_table ("room_coarse_y");
				@this.lua_new_table ();
				@this.lua_push_named_number ("w", (int) current.w);
				@this.lua_close_table ("generator_w");
				@this.lua_new_table ();
				@this.lua_push_named_number ("h", (int) current.h);
				@this.lua_close_table ("generator_h");
				@this.lua_new_table ();
				@this.lua_push_named_number ("w", (int) current.w / 32);
				@this.lua_close_table ("generator_coarse_w");
				@this.lua_new_table ();
				@this.lua_push_named_number ("h", (int) current.h / 32);
				@this.lua_close_table ("generator_coarse_h");
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", (int) current.x / 32 + current.w / 32);
				@this.lua_close_table ("room_coarse_xw");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", (int) current.y / 32 + current.h / 32);
				@this.lua_close_table ("room_coarse_yh");
				@this.lua_new_table ();
				@this.lua_push_named_number ("x", (int) current.x + current.w);
				@this.lua_close_table ("room_xw");
				@this.lua_new_table ();
				@this.lua_push_named_number ("y", (int) current.y + current.h);
				@this.lua_close_table ("room_yh");
			}
		}
		protected unowned Lua.LuaVM get_lua_vm () {
			return @this.global_vm_copy ();
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class LuaGlobal : LAIR.Scribe {
		private Lua.LuaVM globalVM;
		private bool does_ai;
		public LuaGlobal (string lua_ai_path = "immobile", int lua_log_level = 1, string name = "Global Lua VM: ") {
			base.new_local_attributes (lua_log_level, name);
			if (lua_ai_path != "immobile") {
				@this.does_ai = true;
				@this.globalVM = new_lua_vm ();
			} else {
				@this.does_ai = false;
			}
		}
		private static Lua.LuaVM new_lua_vm () {
			Lua.LuaVM? tmp = new Lua.LuaVM ();
			tmp.open_libs ();
			return tmp;
		}
		public unowned Lua.LuaVM global_vm_copy () {
			return @this.globalVM;
		}
		protected bool does_it_ai () {
			return @this.does_ai;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Scribe {
		private static GLib.LogLevelFlags glib_level;
		private bool do_log_me;
		private string name;
		public Scribe (int local_log_level = 2, string new_name = "global log:") {
			GLib.LogLevelFlags glib_level = GLib.LogLevelFlags.LEVEL_MASK;
			@this.do_log_me = true;
			@this.name = new_name;
		}
		public Scribe.new_local_attributes (int local_log_level = 2, string new_name = "global log:") {
			GLib.LogLevelFlags glib_level = GLib.LogLevelFlags.LEVEL_MASK;
			@this.do_log_me = true;
			@this.name = new_name;
		}
		public static void set_log_level (int swit_ch) {
			GLib.LogLevelFlags glib_level = GLib.LogLevelFlags.LEVEL_MASK;
		}
		public void set_name (string new_name) {
			@this.name = new_name;
		}
		public string get_name () {
			return @this.name;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class TagCounter : LAIR.Scribe {
		private uint Count;
		public TagCounter (string new_name) {
			base.new_local_attributes (3, new_name);
			@this.Count = 1;
		}
		public void increment_count () {
			@this.Count++;
		}
		public uint get_count () {
			debug ("tagcounter.vala:13:  %s .", @this.Count.to_string ("%u"));
			return @this.Count;
		}
		public bool check_name (string tocheck) {
			bool r = false;
			if (tocheck == @this.get_name ()) {
				r = true;
			}
			return r;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Tag {
		private string tag_name;
		private bool lose_tag;
		public Tag (string init_tag) {
			@this.tag_name = init_tag;
		}
		public bool has_tag (string test) {
			bool t = false;
			if (test == @this.tag_name) {
				t = true;
			}
			if (@this.lose_tag) {
				t = false;
			}
			return t;
		}
		public string get_tag_name () {
			return @this.tag_name;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class LairFile : LAIR.Scribe {
		private string Path;
		private string Name;
		private GLib.List<string> Tags;
		public LairFile.WithPath (string path) {
			base.new_local_attributes (4, "file:");
			@this.Path = @this.set_path (path);
		}
		public LairFile.WithAttList (GLib.List<string> atts) {
			base.new_local_attributes (4, "file:");
			string? path = null;
			GLib.List<string>? tags = new GLib.List<string> ();
			int x = 0;
			@this.set_tags (tags);
		}
		protected GLib.List<weak string*> set_tags (GLib.List<string> tags) {
			if (@this.Tags == null) {
				@this.Tags = new GLib.List<string> ();
			}
			return @this.Tags.copy ();
		}
		protected string set_path (string path) {
			string[]? tmp = path.split (" ", 2);
			string? tmp2 = tmp[0].replace ("/usr/share/", Environment.get_user_config_dir ());
			tmp2 = tmp2.replace ("/", "\\");
			if (FileUtils.test (tmp[0], FileTest.EXISTS)) {
				@this.Path = tmp[0];
				message ("files.vala:43: Setting Path: %s", @this.Path);
			} else {
				if (FileUtils.test (tmp2, FileTest.EXISTS)) {
					@this.Path = tmp2;
					message ("files.vala:46: Setting Path: %s", @this.Path);
				} else {
					@this.Path = null;
					message ("files.vala:49: Setting Path failed: %s doesn't exist", @this.Path);
				}
			}
			return path;
		}
		public bool has_name (string query) {
			bool tmp = false;
			bool ptd = false;
			if (query == @this.Name) {
				tmp = true;
				if (!ptd) {
					ptd = true;
				}
			}
			return tmp;
		}
		public bool has_tag (string query) {
			bool tmp = false;
			return tmp;
		}
		public bool has_tag_list (GLib.List<string> queryList) {
			bool rtmp = true;
			int i = 0;
			int j = 0;
			if (rtmp) {
				message ("files.vala:97: Found taglist: ");
				message ("files.vala:101: ");
			}
			return rtmp;
		}
		public string get_path () {
			message ("files.vala:106: Getting Path: %s", @this.Path);
			return @this.Path;
		}
		public bool check_path () {
			if (@this.Path != null) {
				message ("files.vala:111: Validating Path: %s", @this.Path);
				return true;
			} else {
				message ("files.vala:114: Validating Path failed: %s doesn't exist.", @this.Path);
				return false;
			}
		}
		public int len_of_config () {
			int Length = 0;
			GLib.File file = File.new_for_path (@this.Path);
			int r = 0;
			if (!file.query_exists (null)) {
				message ("files.vala:123: File '%s' doesn't exist.", file.get_path ());
			}
			if (Length == 0) {
				try {
					GLib.FileInputStream .52 = file.read (null);
					GLib.DataInputStream dis = new GLib.DataInputStream (.52);
					string? line;
					loop {
						string? .53 = dis.read_line (null, null);
						if (!line = (owned) .53 != null) {
							break;
						}
						r++;
					}
					message ("files.vala:132: Configuration File Length %s", r.to_string ("%i"));
				} catch (GLib.Error e) {
					error ("files.vala:134: %s", e.message);
				}
				Length = r;
			}
			r = Length;
			return r;
		}
		public GLib.List<string> get_config_line (int lineNum) {
			GLib.List<string>? tmp = new GLib.List<string> ();
			GLib.File file = File.new_for_path (@this.Path);
			message ("files.vala:144: line %s", lineNum.to_string ("%i"));
			if (!file.query_exists (null)) {
				message ("files.vala:146: File '%s' doesn't exist.", file.get_path ());
			}
			try {
				GLib.FileInputStream .54 = file.read (null);
				GLib.DataInputStream dis = new GLib.DataInputStream (.54);
				string? line;
				int x = 0;
				loop {
					string? .55 = dis.read_line (null, null);
					if (!line = (owned) .55 != null) {
						break;
					}
					if (x == lineNum) {
						string[]? tl = line.split (" ", 0);
						if (FileUtils.test (tl[0], FileTest.EXISTS)) {
							message ("files.vala:160: Loaded Resource: %s", tl[0]);
						} else {
							message ("files.vala:162: Failed to load Resource: %s", tl[0]);
						}
					}
					x++;
				}
			} catch (GLib.Error e) {
				error ("files.vala:168: %s", e.message);
			}
			return tmp;
		}
		public LairFile () {
			base (2, "global log:");
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Image : LAIR.LairFile {
		private SDL.Video.Surface surface;
		public Image (string Path) {
			base.WithPath (Path);
			@this.load ();
		}
		public Image.WithAttList (GLib.List<string> atts) {
			base.WithAttList (atts);
			@this.load ();
		}
		public bool load () {
			bool tmp = false;
			if (@this.check_path ()) {
				message ("images.vala:19: Loading the Image to a Surface %s", @this.get_path ());
				@this.surface = SDLImage.load (@this.get_path ());
				tmp = true;
			} else {
				message ("images.vala:23: Image not found at location %s", @this.get_path ());
			}
			return tmp;
		}
		public SDL.Video.Surface* get_image () {
			return @this.surface;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class FileDB : LAIR.Scribe {
		private GLib.List<LAIR.Image> imgRes;
		private GLib.List<LAIR.Sound> sndRes;
		private GLib.List<LAIR.Fonts> ttfRes;
		private LAIR.LairFile imgListPath;
		private LAIR.LairFile sndListPath;
		private LAIR.LairFile ttfListPath;
		private GLib.List<GLib.List<string>> BodyParts;
		private GLib.List<string> SoundParts;
		private GLib.Rand Sorcerer;
		public FileDB (string imgList, string sndList, string ttfList) {
			base.new_local_attributes (4, "filedb:");
			LAIR.LairFile imgfile = new LAIR.LairFile.WithPath (imgList);
			message ("filedb.vala:21: Pre-Loading the game data files.");
			if (imgfile.check_path ()) {
				message ("filedb.vala:23: Pre-Loading the image files(data at %s).", imgfile.get_path ());
				@this.imgListPath = imgfile;
			} else {
				message ("filedb.vala:26: File '%s' doesn't exist.", imgfile.get_path ());
			}
			LAIR.LairFile sndfile = new LAIR.LairFile.WithPath (sndList);
			if (sndfile.check_path ()) {
				message ("filedb.vala:30: Pre-Loading the sound files(data at %s).", sndfile.get_path ());
				@this.sndListPath = sndfile;
			} else {
				message ("filedb.vala:33: File '%s' doesn't exist.", sndfile.get_path ());
			}
			LAIR.LairFile ttffile = new LAIR.LairFile.WithPath (ttfList);
			if (ttffile.check_path ()) {
				message ("filedb.vala:37: Pre-Loading the font files(data at %s).", ttffile.get_path ());
				@this.ttfListPath = ttffile;
			} else {
				message ("filedb.vala:40: File '%s' doesn't exist.", ttffile.get_path ());
			}
			@this.load_files_with_tags ();
			@this.init_body_vars ();
		}
		private void init_body_vars () {
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (0).append ("head");
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (1).append ("arms");
			@this.BodyParts.nth_data (1).append ("left");
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (2).append ("arms");
			@this.BodyParts.nth_data (2).append ("right");
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (3).append ("body");
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (4).append ("leg");
			@this.BodyParts.nth_data (4).append ("left");
			@this.BodyParts.append (new GLib.List<string> ());
			@this.BodyParts.nth_data (5).append ("leg");
			@this.BodyParts.nth_data (5).append ("right");
			@this.SoundParts.append ("footstep");
			@this.SoundParts.append ("bonk");
			@this.SoundParts.append ("ambient");
		}
		private bool load_files_with_tags () {
			bool tmp = false;
			if (@this.imgListPath.check_path ()) {
				message ("filedb.vala:65: Loading the image files");
				{
					int x = 0;
					{
						bool .56 = true;
						loop {
							if (!.56) {
								x++;
							}
							.56 = false;
							if (!x < @this.imgListPath.len_of_config ()) {
								break;
							}
							GLib.List<string>? image = @this.imgListPath.get_config_line (x);
							message ("filedb.vala:71: .");
							@this.imgRes.append (new LAIR.Image.WithAttList (image));
						}
					}
				}
				tmp = true;
			} else {
				tmp = false;
			}
			if (@this.sndListPath.check_path ()) {
				message ("filedb.vala:79: Loading the sound files");
				{
					int x = 0;
					{
						bool .57 = true;
						loop {
							if (!.57) {
								x++;
							}
							.57 = false;
							if (!x < @this.sndListPath.len_of_config ()) {
								break;
							}
							GLib.List<string>? sound = @this.sndListPath.get_config_line (x);
							message ("filedb.vala:85: .");
							@this.sndRes.append (new LAIR.Sound.WithAttList (sound));
						}
					}
				}
				tmp = true;
			} else {
				tmp = false;
			}
			if (@this.ttfListPath.check_path ()) {
				message ("filedb.vala:93: Loading the font files");
				{
					int x = 0;
					{
						bool .58 = true;
						loop {
							if (!.58) {
								x++;
							}
							.58 = false;
							if (!x < @this.ttfListPath.len_of_config ()) {
								break;
							}
							GLib.List<string>? font = @this.ttfListPath.get_config_line (x);
							message ("filedb.vala:99: .");
							@this.ttfRes.append (new LAIR.Fonts.WithAttList (font, "tiny"));
						}
					}
				}
				tmp = true;
			} else {
				tmp = false;
			}
			return tmp;
		}
		private int get_sounds_length () {
			return (int) @this.sndRes.length ();
		}
		private int get_fonts_length () {
			return (int) @this.ttfRes.length ();
		}
		private int get_random_sound_index () {
			int tmp = @this.int_range (0, @this.get_sounds_length ());
			message ("filedb.vala:119: Random Sound from Index # %s ", tmp.to_string ("%i"));
			return tmp;
		}
		private int get_random_font_index () {
			int tmp = @this.int_range (0, @this.get_fonts_length ());
			message ("filedb.vala:124: Random Font from Index #: %s ", tmp.to_string ("%i"));
			return tmp;
		}
		public SDLMixer.Music* get_rand_sound () {
			return @this.sndRes.nth_data (@this.get_random_sound_index ()).get_sound ();
		}
		public GLib.List<weak SDLMixer.Music*> no_sound () {
			return new GLib.List<weak SDLMixer.Music*> ();
		}
		public GLib.List<weak SDLMixer.Music*> sound_by_name (string name) {
			int c = 0;
			GLib.List<int>? tmp = new GLib.List<int> ();
			GLib.List<weak SDLMixer.Music*>? r = new GLib.List<weak SDLMixer.Music*> ();
			int top = (int) tmp.length ();
			int index = @this.int_range (0, top);
			message ("filedb.vala:148: Emitting random image from index #: %s ", tmp.nth_data (index).to_string ("%i"));
			r.append (@this.sndRes.nth_data (tmp.nth_data (index)).get_sound ());
			return r;
		}
		public GLib.List<weak SDLMixer.Music*> sound_by_tag (string tag) {
			int c = 0;
			GLib.List<int>? tmp = new GLib.List<int> ();
			GLib.List<weak SDLMixer.Music*>? r = new GLib.List<weak SDLMixer.Music*> ();
			int top = (int) tmp.length ();
			int index = @this.int_range (0, top);
			message ("filedb.vala:164: Emitting random image from index #: %s ", tmp.nth_data (index).to_string ("%i"));
			r.append (@this.sndRes.nth_data (tmp.nth_data (index)).get_sound ());
			return r;
		}
		public SDLTTF.Font* get_rand_font () {
			return @this.ttfRes.nth_data (@this.get_random_font_index ()).get_font ();
		}
		public GLib.List<weak SDL.Video.Surface*> image_by_name (string name) {
			int c = 0;
			GLib.List<int>? tmp = new GLib.List<int> ();
			GLib.List<weak SDL.Video.Surface*>? r = new GLib.List<weak SDL.Video.Surface*> ();
			int top = (int) tmp.length ();
			int index = @this.int_range (0, top);
			message ("filedb.vala:193: Emitting random image from index #: %s ", tmp.nth_data (index).to_string ("%i"));
			r.append (@this.imgRes.nth_data (tmp.nth_data (index)).get_image ());
			return r;
		}
		private SDL.Video.Surface* image_by_tag_list (GLib.List<string> tagList) {
			GLib.List<weak SDL.Video.Surface*>? r = new GLib.List<weak SDL.Video.Surface*> ();
			int top = (int) r.length ();
			int index = @this.int_range (0, top);
			message ("filedb.vala:222: Emitting random image from subindex #: %s :", index.to_string ("%i"));
			return r.nth_data (index);
		}
		public GLib.List<weak SDL.Video.Surface*> body_by_tone (string tone) {
			GLib.List<weak SDL.Video.Surface*>? r = new GLib.List<weak SDL.Video.Surface*> ();
			return r;
		}
		public GLib.List<weak SDLMixer.Music*> basic_sounds () {
			GLib.List<weak SDLMixer.Music*>? r = new GLib.List<weak SDLMixer.Music*> ();
			return r;
		}
		public int int_range (int low, int high) {
			return @this.Sorcerer.int_range (low, high);
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Fonts : LAIR.LairFile {
		private SDLTTF.Font font;
		private string Size;
		public Fonts (string path, string size) {
			base.WithPath (path);
			@this.Size = size;
			@this.load ();
		}
		public Fonts.WithAttList (GLib.List<string> path, string size) {
			base.WithAttList (path);
			@this.Size = size;
			@this.load ();
		}
		private bool load () {
			bool tmp = false;
			if (@this.check_path ()) {
				int sz = 12;
				if (@this.Size == "giant") {
					sz = 28;
				} else {
					if (@this.Size == "large") {
						sz = 20;
					} else {
						if (@this.Size == "medium") {
							sz = 12;
						} else {
							if (@this.Size == "small") {
								sz = 10;
							} else {
								if (@this.Size == "tiny") {
									sz = 8;
								}
							}
						}
					}
				}
				@this.font = new SDLTTF.Font (@this.get_path (), sz);
				tmp = true;
			}
			return tmp;
		}
		public SDLTTF.Font* get_font () {
			SDLTTF.Font* tmp = @this.font;
			return tmp;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Sound : LAIR.LairFile {
		private SDLMixer.Music music;
		public Sound (string path) {
			base.WithPath (path);
			@this.load ();
		}
		public Sound.WithAttList (GLib.List<string> path) {
			base.WithAttList (path);
			@this.load ();
		}
		public bool load () {
			bool tmp = false;
			if (@this.check_path ()) {
				message ("sounds.vala:18: Loading the sound to a Music %s", @this.get_path ());
				@this.music = new SDLMixer.Music (@this.get_path ());
				tmp = true;
			} else {
				message ("sounds.vala:22: Sound not found at location %s", @this.get_path ());
			}
			return tmp;
		}
		public SDLMixer.Music* get_sound () {
			SDLMixer.Music* tmp = @this.music;
			return tmp;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class FloorList : LAIR.LuaConf {
		private GLib.List<LAIR.Entity> Particles;
		private SDL.Video.Rect Border;
		private int minx () {
			return @this.Border.x;
		}
		private int miny () {
			return @this.Border.y;
		}
		private int maxx () {
			return @this.Border.x + (int) @this.Border.w;
		}
		private int maxy () {
			return @this.Border.y + (int) @this.Border.h;
		}
		public FloorList (SDL.Video.Rect room_dimensions) {
			base ("immobile", 1, "Local lua VM: ");
			@this.Border = room_dimensions;
			message ("FloorList.vala:20: Setting regular dimensions on Floor minx %s miny %s maxx %s maxy %s", @this.minx ().to_string ("%i"), @this.miny ().to_string ("%i"), @this.maxx ().to_string ("%i"), @this.maxy ().to_string ("%i"));
		}
		private void generate_floor_tile (LAIR.FileDB GameMaster, LAIR.AutoPoint coords, SDL.Video.Renderer* renderer) {
			if (coords.x () < @this.maxx ()) {
				if (coords.x () >= @this.minx ()) {
					if (coords.y () < @this.maxy ()) {
						if (coords.y () >= @this.miny ()) {
							@this.Particles.append (new LAIR.Entity.Floor (coords, GameMaster.image_by_name ("floor"), GameMaster.no_sound (), GameMaster.get_rand_font (), renderer, "floor"));
						}
					}
				}
			}
		}
		public void generate_floor (LAIR.FileDB GameMaster, GLib.List<LAIR.AutoPoint> point_list, SDL.Video.Renderer renderer) {
			message ("FloorList.vala:30: Placing floor at x %s y %s, os %s, oy %s", point_list.nth_data (0).x ().to_string ("%i"), point_list.nth_data (0).y ().to_string ("%i"), point_list.nth_data (1).x ().to_string ("%i"), point_list.nth_data (1).y ().to_string ("%i"));
			@this.generate_floor_tile (GameMaster, point_list.nth_data (1), renderer);
		}
		public uint length () {
			return @this.Particles.length ();
		}
		public unowned GLib.List<LAIR.Entity> get_floor () {
			return @this.Particles;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class MobilesList : LAIR.LuaConf {
		private GLib.List<LAIR.Entity> Mobiles;
		private SDL.Video.Rect Border;
		private int minx () {
			return @this.Border.x;
		}
		private int miny () {
			return @this.Border.y;
		}
		private int maxx () {
			return @this.Border.x + (int) @this.Border.w;
		}
		private int maxy () {
			return @this.Border.y + (int) @this.Border.h;
		}
		public MobilesList (SDL.Video.Rect room_dimensions) {
			base ("immobile", 1, "Local lua VM: ");
			@this.Border = room_dimensions;
			message ("MobilesList.vala:20: Setting regular dimensions on Mobiles minx %s miny %s maxx %s maxy %s", @this.minx ().to_string ("%i"), @this.miny ().to_string ("%i"), @this.maxx ().to_string ("%i"), @this.maxy ().to_string ("%i"));
		}
		private string generate_mobile_tile (LAIR.FileDB GameMaster, LAIR.AutoPoint coords, GLib.List<GLib.List<string>> generated_tags, SDL.Video.Renderer* renderer, string aiscript = "/usr/share/lair/ai.lua", int index = 0) {
			string? tmp = "";
			if (coords.x () < @this.maxx ()) {
				if (coords.x () >= @this.minx ()) {
					if (coords.y () < @this.maxy ()) {
						if (coords.y () >= @this.miny ()) {
							string? new_name = index.to_string ("%i");
							@this.Mobiles.append (new LAIR.Entity.Mobile (coords, aiscript, "default()", GameMaster.image_by_name (generated_tags.nth_data (0).nth_data (0)), GameMaster.no_sound (), GameMaster.get_rand_font (), renderer, generated_tags.nth_data (0), new_name));
							tmp = generated_tags.nth_data (0).nth_data (0);
						}
					}
				}
			}
			return tmp;
		}
		public void generate_mobile (LAIR.FileDB GameMaster, GLib.List<LAIR.AutoPoint> point_list, GLib.List<GLib.List<string>> generated_tags, string aiscript = "/usr/share/lair/ai.lua", SDL.Video.Renderer renderer) {
			bool t = false;
			if (t) {
				message ("MobilesList.vala:50: Placing mobile at x %s y %s, os %s, oy %s", point_list.nth_data (0).x ().to_string ("%i"), point_list.nth_data (0).y ().to_string ("%i"), point_list.nth_data (1).x ().to_string ("%i"), point_list.nth_data (1).y ().to_string ("%i"));
				@this.generate_mobile_tile (GameMaster, point_list.nth_data (1), generated_tags, renderer, "/usr/share/lair/ai.lua", 0);
			}
		}
		public uint length () {
			return @this.Mobiles.length ();
		}
		public unowned GLib.List<LAIR.Entity> get_mobiles () {
			return @this.Mobiles;
		}
		public LAIR.Entity get_mobile (int index) {
			return @this.Mobiles.nth_data (index);
		}
		public void delete_mobile (LAIR.Entity remove) {
			@this.Mobiles.remove_all (remove);
		}
		public void add_mobile (LAIR.Entity add) {
			@this.Mobiles.append (add);
		}
		public GLib.List<LAIR.TagCounter> count_bytag () {
			GLib.List<LAIR.TagCounter>? tag_count = new GLib.List<LAIR.TagCounter> ();
			return tag_count;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class ParticlesList : LAIR.LuaConf {
		private GLib.List<LAIR.Entity> Particles;
		private SDL.Video.Rect Border;
		private int minx () {
			return @this.Border.x;
		}
		private int miny () {
			return @this.Border.y;
		}
		private int maxx () {
			return @this.Border.x + (int) @this.Border.w;
		}
		private int maxy () {
			return @this.Border.y + (int) @this.Border.h;
		}
		public ParticlesList (SDL.Video.Rect room_dimensions) {
			base ("immobile", 1, "Local lua VM: ");
			@this.Border = room_dimensions;
			message ("ParticlesList.vala:20: Setting regular dimensions on Particles minx %s miny %s maxx %s maxy %s", @this.minx ().to_string ("%i"), @this.miny ().to_string ("%i"), @this.maxx ().to_string ("%i"), @this.maxy ().to_string ("%i"));
		}
		private string generate_particle_tile (LAIR.FileDB GameMaster, LAIR.AutoPoint coords, GLib.List<GLib.List<string>> generated_tags, SDL.Video.Renderer* renderer, int index = 0) {
			string? tmp = "";
			if (coords.x () < @this.maxx ()) {
				if (coords.x () >= @this.minx ()) {
					if (coords.y () < @this.maxy ()) {
						if (coords.y () >= @this.miny ()) {
							string? new_name = index.to_string ("%i");
							@this.Particles.append (new LAIR.Entity.Wall (coords, GameMaster.image_by_name (generated_tags.nth_data (0).nth_data (0)), GameMaster.no_sound (), GameMaster.get_rand_font (), renderer, generated_tags.nth_data (0), new_name));
							tmp = generated_tags.nth_data (0).nth_data (0);
						}
					}
				}
			}
			return tmp;
		}
		public void generate_particle (LAIR.FileDB GameMaster, GLib.List<LAIR.AutoPoint> point_list, GLib.List<GLib.List<string>> generated_tags, SDL.Video.Renderer renderer) {
			bool t = false;
			if (t) {
				message ("ParticlesList.vala:48: Placing particle at x %s y %s, os %s, oy %s", point_list.nth_data (0).x ().to_string ("%i"), point_list.nth_data (0).y ().to_string ("%i"), point_list.nth_data (1).x ().to_string ("%i"), point_list.nth_data (1).y ().to_string ("%i"));
				@this.generate_particle_tile (GameMaster, point_list.nth_data (1), generated_tags, renderer, 0);
			}
		}
		public uint length () {
			return @this.Particles.length ();
		}
		public unowned GLib.List<LAIR.Entity> get_particles () {
			return @this.Particles;
		}
		public LAIR.Entity get_particle (int index) {
			return @this.Particles.nth_data (index);
		}
		public GLib.List<LAIR.TagCounter> count_bytag () {
			GLib.List<LAIR.TagCounter>? tag_count = new GLib.List<LAIR.TagCounter> ();
			return tag_count;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class AutoPoint {
		public SDL.Video.Point point;
		public AutoPoint (int xx, int yy) {
			@this.point = SDL.Video.Point. ();
			@this.point.x = xx;
			@this.point.y = yy;
		}
		public AutoPoint.from_point (SDL.Video.Point xy = SDL.Video.Point. ()) {
			@this.point = xy;
		}
		public void set_position (int xx, int yy) {
			@this.point = SDL.Video.Point. ();
			@this.point.x = xx;
			@this.point.y = yy;
		}
		public int x () {
			return @this.point.x;
		}
		public int y () {
			return @this.point.y;
		}
		public SDL.Video.Point get_point () {
			return @this.point;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Room : LAIR.LuaConf {
		private bool visited;
		private SDL.Video.Rect Border;
		private LAIR.FloorList Floor;
		private LAIR.ParticlesList Particles;
		private LAIR.MobilesList Mobiles;
		private LAIR.Entity Player;
		private static LAIR.FileDB GameMaster;
		public Room (SDL.Video.Rect position, SDL.Video.Rect floordims, string[] scripts, LAIR.FileDB DM, SDL.Video.Renderer? renderer) {
			base (scripts[0], 2, "room:");
			@this.set_dimensions (position.x, position.y, position.w, position.h);
			@this.set_floor_dimensions (floordims);
			@this.set_name ("room(" + @this.stringify_hitbox () + "): ");
			message ("room.vala:18: generating room%s", @this.get_name ());
			GameMaster = DM;
			@this.Floor = new LAIR.FloorList (@this.get_hitbox ());
			@this.Particles = new LAIR.ParticlesList (@this.get_hitbox ());
			@this.Mobiles = new LAIR.MobilesList (@this.get_hitbox ());
			@this.lua_push_dimensions (@this.get_hitbox ());
			@this.generate_floor (renderer);
			message ("room.vala:25: loading scripts: %s, %s, %s", scripts[0], scripts[1], scripts[2]);
			@this.generate_particles (renderer);
			@this.generate_mobiles (scripts[2], renderer);
		}
		public Room.WithPlayer (SDL.Video.Rect position, SDL.Video.Rect floordims, string[] scripts, LAIR.FileDB DM, SDL.Video.Renderer? renderer) {
			base (scripts[0], 2, "room:");
			@this.set_dimensions (position.x, position.y, position.w, position.h);
			@this.set_floor_dimensions (floordims);
			@this.set_name ("room (" + @this.stringify_hitbox () + "): ");
			message ("room.vala:34: generating room with player");
			GameMaster = DM;
			@this.Floor = new LAIR.FloorList (@this.get_hitbox ());
			@this.Particles = new LAIR.ParticlesList (@this.get_hitbox ());
			@this.Mobiles = new LAIR.MobilesList (@this.get_hitbox ());
			@this.lua_push_dimensions (@this.get_hitbox ());
			@this.generate_floor (renderer);
			@this.generate_particles (renderer);
			message ("room.vala:42: loading scripts: %s, %s, %s", scripts[0], scripts[1], scripts[2]);
			@this.generate_mobiles (scripts[2], renderer);
			@this.generate_player (scripts[1], renderer);
		}
		private void set_dimensions (int xx, int yy, uint ww, uint hh) {
			@this.Border = SDL.Video.Rect. ();
			@this.Border.x = xx;
			@this.Border.y = yy;
			@this.Border.w = ww;
			@this.Border.h = hh;
		}
		private void set_floor_dimensions (SDL.Video.Rect floordims) {
			@this.lua_push_uint_to_table ("floor_w", "w", (int) floordims.w);
			@this.lua_push_uint_to_table ("floor_h", "h", (int) floordims.h);
			@this.lua_push_uint_to_table ("floor_coarse_w", "w", (int) floordims.w / 32);
			@this.lua_push_uint_to_table ("floor_coarse_h", "h", (int) floordims.h / 32);
		}
		private int get_x () {
			return (int) @this.Border.x;
		}
		private int get_offset_x (int x) {
			int r = x * 32 + @this.get_x ();
			return r;
		}
		private int get_y () {
			return (int) @this.Border.y;
		}
		private int get_offset_y (int y) {
			int r = y * 32 + @this.get_y ();
			return r;
		}
		public uint get_w () {
			return @this.Border.w;
		}
		public uint get_h () {
			return @this.Border.h;
		}
		private void generate_player (string playerScript, SDL.Video.Renderer? renderer) {
			if (!@this.has_player ()) {
				@this.Player = new LAIR.Entity.Player (new LAIR.AutoPoint (128, 128), GameMaster.body_by_tone ("med"), GameMaster.basic_sounds (), GameMaster.get_rand_font (), renderer, "player");
			}
		}
		private GLib.List<LAIR.AutoPoint> generator_push_xy_to_lua (int xx, int yy) {
			GLib.List<LAIR.AutoPoint>? coords = new GLib.List<LAIR.AutoPoint> ();
			coords.append (new LAIR.AutoPoint (xx, yy));
			coords.append (new LAIR.AutoPoint (@this.get_offset_x (xx), @this.get_offset_y (yy)));
			message ("room.vala:80: Coordinates pushed to lua table: %s", coords.length ().to_string ("%u"));
			if (coords.length () == 2) {
				@this.lua_push_coords (coords.nth_data (0), coords.nth_data (1));
				@this.particle_count ();
				@this.particle_count_bytag ();
				@this.mobile_count ();
				@this.mobile_count_bytag ();
			}
			return coords;
		}
		private int particle_count () {
			@this.lua_push_uint_to_table ("generator_particle_count", "c", (int) @this.Particles.length ());
			return (int) @this.Particles.length ();
		}
		private int mobile_count () {
			@this.lua_push_uint_to_table ("generator_mobile_count", "c", (int) @this.Mobiles.length ());
			return (int) @this.Mobiles.length ();
		}
		private void particle_count_bytag () {
		}
		private void mobile_count_bytag () {
		}
		private GLib.List<GLib.List<string>> decide_floor_tile () {
			@this.lua_do_function ("map_cares_insert()");
			GLib.List<string>? cares = @this.get_lua_last_return ();
			GLib.List<GLib.List<string>>? tmp = new GLib.List<GLib.List<string>> ();
			if (cares != null) {
				if (cares.nth_data (0) == "true") {
					message ("room.vala:120: Will it blend?");
					@this.lua_do_function ("floor_image_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("floor_sound_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("floor_fonts_decide()");
					tmp.append (@this.get_lua_last_return ());
				}
			}
			return tmp;
		}
		private GLib.List<GLib.List<string>> decide_block_tile () {
			@this.lua_do_function ("map_cares_insert()");
			GLib.List<string>? cares = @this.get_lua_last_return ();
			GLib.List<GLib.List<string>>? tmp = new GLib.List<GLib.List<string>> ();
			if (cares != null) {
				if (cares.nth_data (0) == "true") {
					message ("room.vala:137: Will it blend?");
					@this.lua_do_function ("map_image_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("map_sound_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("map_fonts_decide()");
					tmp.append (@this.get_lua_last_return ());
				}
			}
			return tmp;
		}
		private GLib.List<GLib.List<string>> decide_mobile_tile (string aiScript) {
			@this.lua_do_function ("mob_cares_insert()");
			GLib.List<string>? cares = @this.get_lua_last_return ();
			GLib.List<GLib.List<string>>? tmp = new GLib.List<GLib.List<string>> ();
			if (cares != null) {
				if (cares.nth_data (0) == "true") {
					message ("room.vala:155: Will it blend?");
					@this.lua_do_function ("mob_image_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("mob_sound_decide()");
					tmp.append (@this.get_lua_last_return ());
					@this.lua_do_function ("mob_fonts_decide()");
					tmp.append (@this.get_lua_last_return ());
				}
			}
			return tmp;
		}
		private void generate_floor (SDL.Video.Renderer* renderer) {
			int WT = (int) @this.get_w () / 32;
			int HT = (int) @this.get_h () / 32;
			{
				int xx = 0;
				{
					bool .59 = true;
					loop {
						if (!.59) {
							xx++;
						}
						.59 = false;
						if (!xx < WT) {
							break;
						}
						{
							int yy = 0;
							{
								bool .60 = true;
								loop {
									if (!.60) {
										yy++;
									}
									.60 = false;
									if (!yy < HT) {
										break;
									}
									message ("room.vala:171: Floor Generation At x %s y %s, os %s oy %s", xx.to_string ("%i"), yy.to_string ("%i"), @this.get_offset_x (xx).to_string ("%i"), @this.get_offset_y (yy).to_string ("%i"));
									@this.Floor.generate_floor (GameMaster, @this.generator_push_xy_to_lua (xx, yy), renderer);
								}
							}
						}
					}
				}
			}
		}
		private void generate_particles (SDL.Video.Renderer* renderer) {
			int WT = (int) @this.get_w () / 32;
			int HT = (int) @this.get_h () / 32;
			{
				int xx = 0;
				{
					bool .61 = true;
					loop {
						if (!.61) {
							xx++;
						}
						.61 = false;
						if (!xx < WT) {
							break;
						}
						{
							int yy = 0;
							{
								bool .62 = true;
								loop {
									if (!.62) {
										yy++;
									}
									.62 = false;
									if (!yy < HT) {
										break;
									}
									message ("room.vala:186: Particle Generation At x %s y %s, os %s oy %s", xx.to_string ("%i"), yy.to_string ("%i"), @this.get_offset_x (xx).to_string ("%i"), @this.get_offset_y (yy).to_string ("%i"));
									@this.Particles.generate_particle (GameMaster, @this.generator_push_xy_to_lua (xx, yy), @this.decide_block_tile (), renderer);
								}
							}
						}
					}
				}
			}
		}
		private void generate_mobiles (string aiScript, SDL.Video.Renderer* renderer) {
			int WT = (int) @this.get_w () / 32;
			int HT = (int) @this.get_h () / 32;
			{
				int xx = 0;
				{
					bool .63 = true;
					loop {
						if (!.63) {
							xx++;
						}
						.63 = false;
						if (!xx < WT) {
							break;
						}
						{
							int yy = 0;
							{
								bool .64 = true;
								loop {
									if (!.64) {
										yy++;
									}
									.64 = false;
									if (!yy < HT) {
										break;
									}
									message ("room.vala:202: Mobile Generation At x %s y %s, os %s oy %s", xx.to_string ("%i"), yy.to_string ("%i"), @this.get_offset_x (xx).to_string ("%i"), @this.get_offset_y (yy).to_string ("%i"));
									@this.Mobiles.generate_mobile (GameMaster, @this.generator_push_xy_to_lua (xx, yy), @this.decide_mobile_tile (aiScript), aiScript, renderer);
								}
							}
						}
					}
				}
			}
		}
		public bool has_player () {
			bool tmp = false;
			if (@this.Player != null) {
				tmp = true;
				@this.visited = true;
			}
			return tmp;
		}
		public LAIR.Entity get_player () {
			LAIR.Entity? tmp = null;
			if (@this.Player != null) {
				tmp = @this.Player;
			}
			return tmp;
		}
		public unowned GLib.List<LAIR.Entity> get_mobiles () {
			return @this.Mobiles.get_mobiles ();
		}
		public int take_turns () {
			int tmp = 1;
			if (@this.has_player ()) {
				if (@this.Mobiles.length () > 0) {
				}
				tmp = @this.Player.run ();
			} else {
				if (@this.Mobiles.length () > 0) {
				}
			}
			return tmp;
		}
		public bool player_detect_collisions () {
			bool t = false;
			if (@this.has_player ()) {
			}
			return t;
		}
		public bool mob_detect_collisions (LAIR.Entity mob) {
			bool t = false;
			return t;
		}
		public bool mob_dedupe_memories () {
			bool r = false;
			return r;
		}
		private SDL.Video.Rect get_hitbox () {
			return @this.Border;
		}
		private string stringify_hitbox () {
			string? HBSUM = "x:";
			HBSUM = HBSUM + @this.Border.x.to_string ("%i");
			HBSUM = HBSUM + "y:";
			HBSUM = HBSUM + @this.Border.y.to_string ("%i");
			HBSUM = HBSUM + "w:";
			HBSUM = HBSUM + @this.Border.w.to_string ("%u");
			HBSUM = HBSUM + "h:";
			HBSUM = HBSUM + @this.Border.h.to_string ("%u");
			return HBSUM;
		}
		private bool point_in_room (LAIR.AutoPoint point, SDL.Video.Rect hitbox) {
			bool t = false;
			int xx = (int) hitbox.x + hitbox.w;
			int yy = (int) hitbox.y + hitbox.h;
			if (point.x () > hitbox.x) {
				if (point.x () < xx) {
					if (point.y () > hitbox.y) {
						if (point.y () < yy) {
							t = true;
						}
					}
				}
			}
			return t;
		}
		public int detect_transitions (LAIR.Entity tmp) {
			int r = 0;
			message ("room.vala:319: detect_transitions 0");
			if (tmp != null) {
				message ("room.vala:321: detect_transitions 1");
				LAIR.AutoPoint? tlc = new LAIR.AutoPoint (tmp.get_hitbox ().x, tmp.get_hitbox ().y);
				bool TLeftCorner = @this.point_in_room (tlc, @this.get_hitbox ());
				LAIR.AutoPoint? trc = new LAIR.AutoPoint ((int) tmp.get_hitbox ().x + tmp.get_hitbox ().w, tmp.get_hitbox ().y);
				bool TRightCorner = @this.point_in_room (trc, @this.get_hitbox ());
				LAIR.AutoPoint? blc = new LAIR.AutoPoint (tmp.get_hitbox ().x, (int) tmp.get_hitbox ().y + tmp.get_hitbox ().h);
				bool BLeftCorner = @this.point_in_room (blc, @this.get_hitbox ());
				LAIR.AutoPoint? brc = new LAIR.AutoPoint ((int) tmp.get_hitbox ().x + tmp.get_hitbox ().w, (int) tmp.get_hitbox ().y + tmp.get_hitbox ().h);
				bool BRightCorner = @this.point_in_room (brc, @this.get_hitbox ());
				message ("room.vala:334: detect_transitions 3");
				if (TLeftCorner) {
					r++;
					message ("room.vala:337: Detected transiton, TLC %s", TLeftCorner.to_string ());
				}
				if (BLeftCorner) {
					r++;
					message ("room.vala:341: Detected transiton, BLC %s", BLeftCorner.to_string ());
				}
				if (BRightCorner) {
					r++;
					message ("room.vala:345: Detected transiton, BRC %s", BLeftCorner.to_string ());
				}
				if (TRightCorner) {
					r++;
					message ("room.vala:349: Detected transiton, TRC %s", TRightCorner.to_string ());
				}
				message ("room.vala:351: detect_transitions 4");
			}
			message ("room.vala:353: detect_transitions 5");
			return r;
		}
		public void render_copy (SDL.Video.Renderer renderer, LAIR.AutoPoint player_pos) {
			if (@this.visited) {
			}
			if (@this.has_player ()) {
				@this.Player.render (renderer, player_pos);
				if (@this.visited = false) {
					@this.visited = true;
				}
				if (@this.Mobiles.length () > 0) {
				}
			}
		}
		public bool enter_room (LAIR.Entity player) {
			message ("room.vala:378: enter_room 0");
			if (player != null) {
				message ("room.vala:380:     Player entering Rroom.");
				@this.Player = player;
				@this.visited = true;
			} else {
				message ("room.vala:384:     Player staying in room");
				@this.Player = null;
				@this.visited = false;
			}
			message ("room.vala:388: enter_room 2");
			return @this.visited;
		}
		public bool mob_enter_room (LAIR.Entity mob = null) {
			message ("room.vala:392: mob_enter_room 0");
			if (mob != null) {
				message ("room.vala:394:     Mob Entering Room.");
				@this.Mobiles.add_mobile (mob);
			}
			message ("room.vala:397: mob_enter_room 2");
			return @this.visited;
		}
		public LAIR.Entity leave_room (int doleave) {
			LAIR.Entity? tmp = null;
			message ("room.vala:402: leave_room 0");
			if (doleave == 4) {
				message ("room.vala:404: leave_room 1 doleave %s", doleave.to_string ("%i"));
				if (@this.Player != null) {
					message ("room.vala:406: leave_room 1 player is present");
					tmp = @this.Player;
					@this.Player = null;
				}
			} else {
				if (doleave > 0) {
					message ("room.vala:411: leave_room 2 doleave %s", doleave.to_string ("%i"));
					if (@this.Player != null) {
						message ("room.vala:413: leave_room 2 player is present");
						tmp = @this.Player;
					}
				}
			}
			message ("room.vala:417: leave_room 3");
			return tmp;
		}
		public LAIR.Entity mob_leave_room (int doleave, int mob_index) {
			LAIR.Entity? tmp = null;
			message ("room.vala:422: mob_leave_room 0");
			if (doleave == 4) {
				message ("room.vala:424: mob_leave_room 1 doleave %s", doleave.to_string ("%i"));
				if (mob_index < @this.Mobiles.length ()) {
					message ("room.vala:426: mob_leave_room 0");
					LAIR.Entity? do_leave = @this.Mobiles.get_mobile (mob_index);
					@this.Mobiles.delete_mobile (@this.Mobiles.get_mobile (mob_index));
					return do_leave;
				}
			} else {
				if (doleave > 0) {
					message ("room.vala:432: mob_leave_room 2 doleave %s", doleave.to_string ("%i"));
					if (mob_index < @this.Mobiles.length ()) {
						message ("room.vala:434: mob_leave_room 0");
						LAIR.Entity? dont_leave = @this.Mobiles.get_mobile (mob_index);
						return dont_leave;
					}
				}
			}
			message ("room.vala:439: mob_leave_room 3");
			return tmp;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Floor : LAIR.LuaConf {
		private GLib.List<LAIR.Room> rooms;
		public Floor (int count, string[] scripts, LAIR.FileDB DM, SDL.Video.Renderer? renderer) {
			base (scripts[0], 4, "floor:");
			int width = count + 1 * 5 * 32;
			int height = count + 1 * 5 * 32;
			x_max = width;
			y_max = height;
			SDL.Video.Rect floor_dims = SDL.Video.Rect. ();
			{
				int x = 0;
				{
					bool .66 = true;
					loop {
						if (!.66) {
							x++;
						}
						.66 = false;
						if (!x < count) {
							break;
						}
						{
							int y = 0;
							{
								bool .67 = true;
								loop {
									if (!.67) {
										y++;
									}
									.67 = false;
									if (!y < count) {
										break;
									}
									SDL.Video.Rect XYOffset = SDL.Video.Rect. ();
									message ("floor.vala:20: Generating room at : x %s y %s w %s h%s", XYOffset.x.to_string ("%i"), XYOffset.y.to_string ("%i"), XYOffset.w.to_string ("%u"), XYOffset.h.to_string ("%u"));
									@this.rooms.append (new LAIR.Room (XYOffset, floor_dims, scripts, DM, renderer));
								}
							}
						}
					}
				}
			}
			@this.lua_do_function ("archive_old_map()");
		}
		public Floor.WithPlayer (int count, int entry, string[] scripts, LAIR.FileDB DM, SDL.Video.Renderer? renderer) {
			base (scripts[0], 4, "floor:");
			int c = 0;
			int width = count + 1 * 5 * 32;
			int height = count + 1 * 5 * 32;
			SDL.Video.Rect FloorDims = SDL.Video.Rect. ();
			{
				int x = 0;
				{
					bool .68 = true;
					loop {
						if (!.68) {
							x++;
						}
						.68 = false;
						if (!x < count) {
							break;
						}
						{
							int y = 0;
							{
								bool .69 = true;
								loop {
									if (!.69) {
										y++;
									}
									.69 = false;
									if (!y < count) {
										break;
									}
									SDL.Video.Rect XYOffset = SDL.Video.Rect. ();
									message ("floor.vala:39: Generating room at : x %s y %s w %s h%s", XYOffset.x.to_string ("%i"), XYOffset.y.to_string ("%i"), XYOffset.w.to_string ("%u"), XYOffset.h.to_string ("%u"));
									if (c == entry) {
										@this.rooms.append (new LAIR.Room.WithPlayer (XYOffset, FloorDims, scripts, DM, renderer));
									} else {
										@this.rooms.append (new LAIR.Room (XYOffset, FloorDims, scripts, DM, renderer));
									}
									c++;
								}
							}
						}
					}
				}
			}
			@this.lua_do_function ("archive_old_map()");
		}
		private bool has_player () {
			bool tmp = false;
			return tmp;
		}
		private LAIR.Entity get_player () {
			LAIR.Entity? temp = null;
			return temp;
		}
		private unowned LAIR.Room get_room_player () {
			unowned LAIR.Room? temp = null;
			return temp;
		}
		private LAIR.AutoPoint get_room_player_corner () {
			int .71;
			if (@this.get_player ().get_x () - @this.get_room_player ().get_w () / 3 > 0) {
				.71 = (int) @this.get_player ().get_x () - @this.get_room_player ().get_w () / 3;
			} else {
				.71 = 0;
			}
			int .72;
			if (@this.get_player ().get_y () - @this.get_room_player ().get_h () / 3 > 0) {
				.72 = (int) @this.get_player ().get_y () - @this.get_room_player ().get_h () / 3;
			} else {
				.72 = 0;
			}
			LAIR.AutoPoint? r = new LAIR.AutoPoint (.71, .72);
			return r;
		}
		public int take_turns () {
			int tmp = 1;
			return tmp;
		}
		public bool detect_collisions () {
			bool tmp = false;
			return tmp;
		}
		public bool dedupe_memories () {
			bool r = false;
			return r;
		}
		public void render_copy (SDL.Video.Renderer renderer) {
			if (@this.has_player ()) {
			}
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Tower : LAIR.Scribe {
		private GLib.List<LAIR.Floor> floors;
		public Tower (string size, string[] scripts, LAIR.FileDB DM, SDL.Video.Renderer? renderer) {
			base.new_local_attributes (4, "tower:");
			int count = 1;
			if (size == "giant") {
				count = 6;
			} else {
				if (size == "large") {
					count = 5;
				} else {
					if (size == "medium") {
						count = 4;
					} else {
						if (size == "small") {
							count = 3;
						} else {
							if (size == "tiny") {
								count = 2;
							} else {
								if (size == "oneroom") {
									count = 1;
								}
							}
						}
					}
				}
			}
			message ("tower.vala:21: Building %s-size Tower, %s floors", size, count.to_string ("%i"));
			{
				int c = 0;
				{
					bool .74 = true;
					loop {
						if (!.74) {
							c++;
						}
						.74 = false;
						if (!c <= count - 1) {
							break;
						}
						message ("tower.vala:23:  Creating new floor :%s", c.to_string ("%i"));
						if (c == 0) {
							@this.floors.append (new LAIR.Floor.WithPlayer (count, 0, scripts, DM, renderer));
						} else {
							@this.floors.append (new LAIR.Floor (count, scripts, DM, renderer));
						}
					}
				}
			}
		}
		public int take_turns () {
			int tmp = 1;
			message ("tower.vala:33:  Entities in the tower are taking turns.");
			return tmp;
		}
		public bool detect_collisions () {
			bool tmp = false;
			return tmp;
		}
		public bool dedupe_memories () {
			bool r = false;
			return r;
		}
		public void render_copy (SDL.Video.Renderer renderer) {
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Game : LAIR.Scribe {
		private SDL.Video.Window window;
		private SDL.Video.Renderer WindowRenderer;
		private LAIR.Tower GameEnvironment;
		private bool dedupe;
		public Game (string[] listPaths, string[] scriptPaths, string mapSize, int screenW, int screenH) {
			base.new_local_attributes (3, "floor:");
			string? imageListPath = listPaths[0];
			string? soundListPath = listPaths[1];
			string? fontsListPath = listPaths[2];
			@this.window = new SDL.Video.Window ("LAIR!", Video.Window.POS_CENTERED, Video.Window.POS_CENTERED, screenW, screenH, Video.WindowFlags.SHOWN);
			@this.WindowRenderer = Video.Renderer.create (@this.window, -1, Video.RendererFlags.ACCELERATED | Video.RendererFlags.PRESENTVSYNC);
			@this.window.show ();
			assert (@this.WindowRenderer != null);
			int imgInitFlags = SDLImage.InitFlags.PNG;
			int initResult = SDLImage.init (imgInitFlags);
			if (initResult & imgInitFlags != imgInitFlags) {
			}
			@this.GameEnvironment = new LAIR.Tower (mapSize, scriptPaths, new LAIR.FileDB (imageListPath, soundListPath, fontsListPath), @this.WindowRenderer);
		}
		private int update_screen () {
			@this.GameEnvironment.detect_collisions ();
			int r = @this.GameEnvironment.take_turns ();
			@this.GameEnvironment.render_copy (@this.WindowRenderer);
			if (@this.dedupe) {
				@this.GameEnvironment.dedupe_memories ();
				@this.dedupe = false;
			} else {
				@this.dedupe = true;
			}
			@this.WindowRenderer.present ();
			return r;
		}
		public int run () {
			int exit = 1;
			@this.WindowRenderer.set_draw_color (0xFF, 0xFF, 0xFF, Video.Alpha.TRANSPARENT);
			loop {
				if (!exit != 0) {
					break;
				}
				@this.WindowRenderer.clear ();
				exit = @this.update_screen ();
				message ("game.vala:48:  -> input was:%s", exit.to_string ("%i"));
				SDL.Timer.delay (120);
			}
			return exit;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Dice : LAIR.LuaConf {
		private GLib.Rand dice_bag;
		public Dice (string lua_ai_path, int lua_log_level, string name = "rolls_a") {
			base (lua_ai_path, lua_log_level, name);
		}
		protected int roll_dice (int min, int max) {
			return @this.dice_bag.int_range (min, max);
		}
		protected int roll_hundred () {
			return @this.roll_dice (0, 100);
		}
		protected int roll_twenty () {
			return @this.roll_dice (0, 20);
		}
		protected int roll_twelve () {
			return @this.roll_dice (0, 10);
		}
		protected int roll_eight () {
			return @this.roll_dice (0, 8);
		}
		protected int roll_six () {
			return @this.roll_dice (0, 6);
		}
		protected int roll_four () {
			return @this.roll_dice (0, 4);
		}
		protected int roll_two () {
			return @this.roll_dice (0, 2);
		}
		protected bool coin_toss () {
			bool r = false;
			if (@this.roll_two () == 2) {
				r = true;
			}
			return r;
		}
		protected int roll_variable (int sides = 0) {
			int r = 0;
			if (sides == 0) {
				r = @this.roll_six ();
			} else {
				r = @this.roll_dice (0, sides);
			}
			return r;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Type : LAIR.Dice {
		private bool player;
		private bool floor;
		private bool wall;
		private bool mobile;
		private GLib.List<LAIR.Tag> tags;
		public Type (string lua_ai_conf = "immobile") {
			base (lua_ai_conf, 6, "entity");
			@this.tags.append (new LAIR.Tag (lua_ai_conf));
		}
		public Type.ParameterList (GLib.List<string> types, string lua_ai_conf = "immobile") {
			base (lua_ai_conf, 6, "entity");
			@this.tags.append (new LAIR.Tag (lua_ai_conf));
		}
		public Type.ParameterListBlocked (GLib.List<string> types, string lua_ai_conf = "immobile") {
			base (lua_ai_conf, 6, "entity");
			@this.tags.append (new LAIR.Tag (lua_ai_conf));
		}
		public Type.Player (GLib.List<string> types, string lua_ai_conf = "immobile") {
			base (lua_ai_conf, 6, "entity");
			@this.tags.append (new LAIR.Tag (lua_ai_conf));
			@this.player = true;
		}
		public Type.Mobile (GLib.List<string> types, string lua_ai_conf = "immobile") {
			base (lua_ai_conf, 6, "entity");
			@this.tags.append (new LAIR.Tag (lua_ai_conf));
		}
		private void check_types () {
		}
		private bool check_new_type (string new_type) {
			bool r = false;
			return r;
		}
		private void instant_type (GLib.List<string> new_type) {
		}
		protected void insert_type (string new_type) {
			if (@this.check_new_type (new_type)) {
				@this.tags.append (new LAIR.Tag (new_type));
				message ("type.vala:64:    Added tag: %s", new_type);
				@this.check_types ();
			}
		}
		protected void set_type (string new_type) {
			@this.insert_type (new_type);
		}
		protected bool has_type (string hyp_type) {
			bool r = false;
			return r;
		}
		protected bool check_type (string hyp_type) {
			return @this.has_type (hyp_type);
		}
		protected bool get_block () {
			bool r = true;
			if (@this.floor) {
				r = false;
			}
			return r;
		}
		public bool is_player () {
			return @this.player;
		}
		public unowned GLib.List<LAIR.Tag> get_tags () {
			unowned GLib.List<LAIR.Tag>? r = @this.tags;
			return r;
		}
		public GLib.List<string> get_tags_strings () {
			GLib.List<string>? r = new GLib.List<string> ();
			return r;
		}
		protected string stringify_tags () {
			string? r = " tags:";
			message ("type.vala:110: %s", r);
			return r;
		}
		public string get_category () {
			string? r = "uncategorized";
			if (@this.mobile) {
				r = "mobile ";
			} else {
				if (@this.wall) {
					r = "particle ";
				}
			}
			return r;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Sprite : LAIR.Anim {
		private GLib.List<SDL.Video.Texture> body;
		public Sprite (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDL.Video.Renderer? renderer) {
			base (SDL.Video.Rect. ());
		}
		public Sprite.ParameterList (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Parameter (SDL.Video.Rect. (), tags);
		}
		public Sprite.Blocked (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (SDL.Video.Rect. (), tags);
		}
		public Sprite.Mobile (LAIR.AutoPoint corner, string aiScript, GLib.List<weak SDL.Video.Surface*> Surfaces, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (SDL.Video.Rect. (), aiScript, tags);
		}
		public Sprite.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Player (SDL.Video.Rect. (), tags);
		}
		public void render_copy (SDL.Video.Renderer* renderer, LAIR.AutoPoint player_pos) {
			if (@this.is_player ()) {
			} else {
			}
			@this.toggle_wobble_off ();
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Anim : LAIR.Type {
		private SDL.Video.Rect position;
		private SDL.Video.Rect source;
		private SDL.Video.Rect offsetHitBox;
		private SDL.Video.Rect rangeOfSight;
		private bool wobble;
		private static LAIR.AutoPoint cursorPosition;
		public Anim (SDL.Video.Rect rect) {
			base ("immobile");
			@this.position = SDL.Video.Rect. ();
			@this.source = SDL.Video.Rect. ();
		}
		public Anim.Parameter (SDL.Video.Rect rect, GLib.List<string> tags) {
			base.ParameterList (tags, "immobile");
			@this.position = SDL.Video.Rect. ();
			@this.source = SDL.Video.Rect. ();
		}
		public Anim.Blocked (SDL.Video.Rect rect, GLib.List<string> tags) {
			base.ParameterListBlocked (tags, "immobile");
			@this.position = SDL.Video.Rect. ();
			@this.source = SDL.Video.Rect. ();
		}
		public Anim.Mobile (SDL.Video.Rect rect, string aiScript, GLib.List<string> tags) {
			base.Mobile (tags, aiScript);
			@this.position = SDL.Video.Rect. ();
			@this.source = SDL.Video.Rect. ();
		}
		public Anim.Player (SDL.Video.Rect rect, GLib.List<string> tags) {
			base.Player (tags, "immobile");
			@this.position = SDL.Video.Rect. ();
			@this.source = SDL.Video.Rect. ();
		}
		protected SDL.Video.Rect get_source () {
			return @this.source;
		}
		private int do_wobble () {
			int r = 0;
			if (@this.wobble == true) {
				r = @this.roll_dice (-4, 4);
			}
			return r;
		}
		protected void toggle_wobble_on () {
			@this.wobble = true;
		}
		protected void toggle_wobble_off () {
			@this.wobble = false;
		}
		protected SDL.Video.Rect get_position (LAIR.AutoPoint offset_px) {
			SDL.Video.Rect r = SDL.Video.Rect. ();
			return r;
		}
		protected SDL.Video.Rect get_text_source () {
			return SDL.Video.Rect. ();
		}
		protected SDL.Video.Rect get_text_position (LAIR.AutoPoint offset_px) {
			SDL.Video.Rect r = SDL.Video.Rect. ();
			return r;
		}
		public int get_width () {
			int r = 0;
			if (@this.source.w > 0) {
				r = (int) @this.source.w;
			}
			return r;
		}
		public string stringify_width () {
			int t = @this.get_width ();
			string? r = " w:";
			if (t > 0) {
				r = r + t.to_string ("%i");
			}
			return r;
		}
		public int get_half_width () {
			int hW = (int) @this.get_width () / 2;
			return hW;
		}
		public int get_height () {
			int r = 0;
			if (@this.source.h > 0) {
				r = (int) @this.source.h;
			}
			return r;
		}
		public string stringify_height () {
			int t = @this.get_height ();
			string? r = " h:";
			if (t > 0) {
				r = r + t.to_string ("%i");
			}
			return r;
		}
		public int get_half_height () {
			int hH = (int) @this.get_height () / 2;
			return hH;
		}
		public int get_x () {
			int t = @this.position.x;
			return t;
		}
		public string stringify_x () {
			int t = @this.get_x ();
			string? r = " x:";
			if (t > 0) {
				r = r + t.to_string ("%i");
			}
			return r;
		}
		public int get_y () {
			int t = @this.position.y;
			return t;
		}
		public string stringify_y () {
			int t = @this.get_y ();
			string? r = " y:";
			if (t > 0) {
				r = r + t.to_string ("%i");
			}
			return r;
		}
		public SDL.Video.Rect get_hitbox () {
			SDL.Video.Rect r = SDL.Video.Rect. ();
			if (@this.get_block ()) {
				if (@this.is_player ()) {
					r = SDL.Video.Rect. ();
				} else {
					r = SDL.Video.Rect. ();
				}
			}
			return r;
		}
		public SDL.Video.Rect get_range_of_sight (int player_aim = 0) {
			int .30;
			if (@this.get_x () + @this.rangeOfSight.x + player_aim * 32 > 0) {
				.30 = @this.get_x () + @this.rangeOfSight.x + player_aim * 32;
			} else {
				.30 = -160 + @this.get_x () + @this.rangeOfSight.x + player_aim * 32;
			}
			int new_x = .30;
			int .31;
			if (@this.get_y () + @this.rangeOfSight.y + player_aim * 32 > 0) {
				.31 = @this.get_y () + @this.rangeOfSight.y + player_aim * 32;
			} else {
				.31 = -160 + @this.get_y () + @this.rangeOfSight.y + player_aim * 32;
			}
			int new_y = .31;
			SDL.Video.Rect temp = SDL.Video.Rect. ();
			return temp;
		}
		private int get_center_x () {
			return @this.get_x () + @this.get_half_width ();
		}
		private int get_center_y () {
			return @this.get_y () + @this.get_half_height ();
		}
		public LAIR.AutoPoint get_center () {
			LAIR.AutoPoint? coords = new LAIR.AutoPoint (@this.get_center_x (), @this.get_center_y ());
			return coords;
		}
		private double radians_to_degrees (double radians) {
			double r = 180.0 / Math.PI * radians;
			return r;
		}
		protected void set_cursor_position (int xx, int yy) {
			cursorPosition.set_position (xx, yy);
		}
		public double get_angle () {
			double degrees = 0.0;
			if (cursorPosition.x () == 0) {
				if (cursorPosition.y () == 0) {
					degrees = 0.0;
				}
			} else {
				degrees = @this.radians_to_degrees (Math.atan2 (cursorPosition.x () - @this.get_center ().x (), cursorPosition.y () - @this.get_center ().y ()) + 135.0);
			}
			return degrees * -1.0;
		}
		public int set_x (int x) {
			@this.position.x = x;
			if (@this.position.x < 0) {
				@this.position.x = 0;
			} else {
				if (@this.position.x > x_max) {
					@this.position.x = x_max;
				}
			}
			return @this.position.x;
		}
		public int set_y (int y) {
			@this.position.y = y;
			if (@this.position.y < 0) {
				@this.position.y = 0;
			} else {
				if (@this.position.y > y_max) {
					@this.position.y = y_max;
				}
			}
			return @this.position.y;
		}
		protected string stringify_coordinates () {
			string? r = @this.stringify_x () + @this.stringify_y () + @this.stringify_width () + @this.stringify_height ();
			return r;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Text : LAIR.Sprite {
		private weak SDLTTF.Font Font;
		private GLib.List<SDL.Video.Texture> Text;
		private bool showStats;
		private bool showSkills;
		private SDL.Video.Color GetColor () {
			SDL.Video.Color r = { 0, 0, 0 };
			return r;
		}
		private void insert_label (GLib.List<string> Labels, SDL.Video.Renderer* renderer) {
		}
		public Text (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, renderer);
			@this.Font = font;
			@this.insert_label (Labels, renderer);
		}
		public Text.Parameter (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.ParameterList (corner, Surfaces, renderer, tags);
			@this.Font = font;
			@this.insert_label (Labels, renderer);
		}
		public Text.Blocked (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (corner, Surfaces, renderer, tags);
			@this.Font = font;
			@this.insert_label (Labels, renderer);
		}
		public Text.Mobile (LAIR.AutoPoint corner, string aiScript, GLib.List<weak SDL.Video.Surface*> Surfaces, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (corner, aiScript, Surfaces, renderer, tags);
			@this.Font = font;
			@this.insert_label (Labels, renderer);
		}
		public Text.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Player (corner, Surfaces, renderer, tags);
			@this.Font = font;
			@this.insert_label (Labels, renderer);
		}
		protected void show_stats () {
			@this.showStats = !@this.showStats;
		}
		protected void show_skills () {
			@this.showSkills = !@this.showSkills;
		}
		public void render_text (SDL.Video.Renderer* renderer, LAIR.AutoPoint player_pos) {
			if (@this.showStats) {
				message ("text.vala:56: Showing Stats");
				{
					int i = 0;
					{
						bool .32 = true;
						loop {
							if (!.32) {
								i++;
							}
							.32 = false;
							if (!i < 5) {
								break;
							}
							LAIR.AutoPoint? tmp = new LAIR.AutoPoint (player_pos.x () - 34, player_pos.y () - 2 - i * 11);
							renderer.copyex (@this.Text.nth_data (i), @this.get_text_source (), @this.get_text_position (tmp), 0.0, null, Video.RendererFlip.NONE);
						}
					}
				}
			}
			if (@this.showSkills) {
				message ("text.vala:66: Showing Skills");
				{
					int i = 5;
					{
						bool .33 = true;
						loop {
							if (!.33) {
								i++;
							}
							.33 = false;
							if (!i < 5 + @this.Text.length ()) {
								break;
							}
							LAIR.AutoPoint? tmp = new LAIR.AutoPoint (player_pos.x () - 34, player_pos.y () - 2 - i * 11);
							renderer.copyex (@this.Text.nth_data (i), @this.get_text_source (), @this.get_text_position (tmp), 0.0, null, Video.RendererFlip.NONE);
						}
					}
				}
			}
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Voice : LAIR.Text {
		private weak SDLMixer.Music Footsteps;
		private weak SDLMixer.Music Bonk;
		private weak SDLMixer.Music Ambient;
		private void set_sounds (GLib.List<weak SDLMixer.Music*> music) {
			if (music.length () > 0) {
				if (music.nth_data (0) != null) {
					@this.Footsteps = music.nth_data (0);
				}
			}
			if (music.length () > 1) {
				if (music.nth_data (1) != null) {
					@this.Bonk = music.nth_data (1);
				}
			}
			if (music.length () > 2) {
				if (music.nth_data (2) != null) {
					@this.Ambient = music.nth_data (2);
				}
			}
		}
		public Voice (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, font, Labels, renderer);
			@this.set_sounds (music);
		}
		public Voice.Parameter (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Parameter (corner, Surfaces, font, Labels, renderer, tags);
			@this.set_sounds (music);
		}
		public Voice.Blocked (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (corner, Surfaces, font, Labels, renderer, tags);
			@this.set_sounds (music);
		}
		public Voice.Mobile (LAIR.AutoPoint corner, string aiScript, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (corner, aiScript, Surfaces, font, Labels, renderer, tags);
			@this.set_sounds (music);
		}
		public Voice.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, GLib.List<string> Labels, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Player (corner, Surfaces, font, Labels, renderer, tags);
			@this.set_sounds (music);
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Stats : LAIR.Voice {
		private int Strength;
		private int Agility;
		private int Toughness;
		private int Intelligence;
		private int Special;
		private int speed;
		private int exert;
		private int dodge;
		private int aim;
		private int will;
		private int resist;
		private int magic;
		private int tech;
		private string stat_func;
		private int has_speed () {
			int .34;
			if (@this.speed > 0) {
				.34 = 1;
			} else {
				.34 = 0;
			}
			return .34;
		}
		private int has_exert () {
			int .35;
			if (@this.exert > 0) {
				.35 = 1;
			} else {
				.35 = 0;
			}
			return .35;
		}
		private int has_dodge () {
			int .36;
			if (@this.dodge > 0) {
				.36 = 1;
			} else {
				.36 = 0;
			}
			return .36;
		}
		private int has_aim () {
			int .37;
			if (@this.aim > 0) {
				.37 = 1;
			} else {
				.37 = 0;
			}
			return .37;
		}
		private int has_will () {
			int .38;
			if (@this.will > 0) {
				.38 = 1;
			} else {
				.38 = 0;
			}
			return .38;
		}
		private int has_resist () {
			int .39;
			if (@this.resist > 0) {
				.39 = 1;
			} else {
				.39 = 0;
			}
			return .39;
		}
		private int has_magic () {
			int .40;
			if (@this.magic > 0) {
				.40 = 1;
			} else {
				.40 = 0;
			}
			return .40;
		}
		private int has_tech () {
			int .41;
			if (@this.tech > 0) {
				.41 = 1;
			} else {
				.41 = 0;
			}
			return .41;
		}
		private string stringify_speed (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .42;
				if (@this.has_speed () != 0) {
					.42 = "speed ";
				} else {
					.42 = " ";
				}
				r = r + .42;
			} else {
				if (player_aim > 5) {
					if (@this.has_speed () != 0) {
						r = r + "has-speed";
					}
				}
			}
			return r;
		}
		private string stringify_exert (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .43;
				if (@this.has_exert () != 0) {
					.43 = "exert ";
				} else {
					.43 = " ";
				}
				r = r + .43;
			} else {
				if (player_aim > 5) {
					if (@this.has_exert () != 0) {
						r = r + "has-exert";
					}
				}
			}
			return r;
		}
		private string stringify_dodge (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .44;
				if (@this.has_dodge () != 0) {
					.44 = "dodge ";
				} else {
					.44 = " ";
				}
				r = r + .44;
			} else {
				if (player_aim > 5) {
					if (@this.has_dodge () != 0) {
						r = r + "has-dodge";
					}
				}
			}
			return r;
		}
		private string stringify_aim (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .45;
				if (@this.has_aim () != 0) {
					.45 = "aim ";
				} else {
					.45 = " ";
				}
				r = r + .45;
			} else {
				if (player_aim > 5) {
					if (@this.has_aim () != 0) {
						r = r + "has-aim";
					}
				}
			}
			return r;
		}
		private string stringify_will (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .46;
				if (@this.has_will () != 0) {
					.46 = "will ";
				} else {
					.46 = " ";
				}
				r = r + .46;
			} else {
				if (player_aim > 5) {
					if (@this.has_will () != 0) {
						r = r + "has-will";
					}
				}
			}
			return r;
		}
		private string stringify_resist (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .47;
				if (@this.has_resist () != 0) {
					.47 = "resist ";
				} else {
					.47 = " ";
				}
				r = r + .47;
			} else {
				if (player_aim > 5) {
					if (@this.has_resist () != 0) {
						r = r + "has-resist";
					}
				}
			}
			return r;
		}
		private string stringify_magic (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .48;
				if (@this.has_magic () != 0) {
					.48 = "magic ";
				} else {
					.48 = " ";
				}
				r = r + .48;
			} else {
				if (player_aim > 5) {
					if (@this.has_magic () != 0) {
						r = r + "has-magic";
					}
				}
			}
			return r;
		}
		private string stringify_tech (int player_aim = 0) {
			string? r = " ";
			if (player_aim <= 5) {
				unowned string .49;
				if (@this.has_tech () != 0) {
					.49 = "tech ";
				} else {
					.49 = " ";
				}
				r = r + .49;
			} else {
				if (player_aim > 5) {
					if (@this.has_tech () != 0) {
						r = r + "has-tech";
					}
				}
			}
			return r;
		}
		public Stats (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, music, font, generate_labels (), renderer);
		}
		public Stats.Floor (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base.Parameter (corner, Surfaces, music, font, generate_labels (), renderer, one_tag_to_list ("floor"));
		}
		public Stats.Blocked (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (corner, Surfaces, music, font, generate_labels (), renderer, tags);
		}
		public Stats.Wall (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (corner, Surfaces, music, font, generate_labels (), renderer, tags);
			@this.Strength = 10;
			@this.Agility = 10;
			@this.Toughness = 10;
			@this.Intelligence = 0;
			@this.Special = 0;
			@this.speed = 1;
		}
		public Stats.Mobile (LAIR.AutoPoint corner, string aiScript, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (corner, aiScript, Surfaces, music, font, generate_labels (), renderer, tags);
		}
		public Stats.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base.Player (corner, Surfaces, music, font, generate_labels (), renderer, one_tag_to_list ("player"));
		}
		private static GLib.List<string> generate_labels () {
			GLib.List<string>? tmp = new GLib.List<string> ();
			tmp.append ("Strength : ");
			tmp.append ("Agility  : ");
			tmp.append ("Toughness: ");
			tmp.append ("Intellect: ");
			tmp.append ("Special  : ");
			tmp.append (" _speed : ");
			tmp.append (" _exert : ");
			tmp.append (" _dodge : ");
			tmp.append (" _aim   : ");
			tmp.append (" _will  : ");
			tmp.append (" _resist: ");
			tmp.append (" _magic : ");
			tmp.append (" _tech  : ");
			return tmp;
		}
		public void set_stat_func (string statfunc) {
			@this.stat_func = statfunc;
		}
		public string get_stat_func () {
			return @this.stat_func;
		}
		public int Speed () {
			int tmp = @this.Strength / 5 + @this.Agility / 2 / 2;
			return tmp + @this.speed * @this.has_speed ();
		}
		public int Exert () {
			int tmp = @this.Strength / 5 + @this.Toughness / 2 / 2;
			return tmp + @this.exert * @this.has_exert ();
		}
		public int Dodge () {
			int tmp = @this.Agility / 5 + @this.Toughness / 2 / 2;
			return tmp + @this.dodge * @this.has_dodge ();
		}
		public int Aim () {
			int tmp = @this.Agility / 5 + @this.Intelligence / 2 / 2;
			return tmp + @this.aim * @this.has_aim ();
		}
		public int Will () {
			int tmp = @this.Toughness / 5 + @this.Intelligence / 2 / 2;
			return tmp + @this.will * @this.has_will ();
		}
		public int Resist () {
			int tmp = @this.Toughness / 5 + @this.Special / 2 / 2;
			return tmp + @this.resist * @this.has_resist ();
		}
		public int Magic () {
			int tmp = @this.Intelligence / 5 + @this.Special / 2 / 2;
			return tmp + @this.magic * @this.has_magic ();
		}
		public int Tech () {
			int tmp = @this.Intelligence / 5 + @this.Agility / 2 / 2;
			return tmp + @this.tech * @this.has_tech ();
		}
		public int Memory () {
			return @this.Intelligence * 5;
		}
		protected string stringify_skills (int player_aim = 0) {
			string? skills = " skills: ";
			skills = skills + @this.stringify_speed (0);
			skills = skills + @this.stringify_exert (0);
			skills = skills + @this.stringify_dodge (0);
			skills = skills + @this.stringify_aim (0);
			skills = skills + @this.stringify_will (0);
			skills = skills + @this.stringify_resist (0);
			skills = skills + @this.stringify_magic (0);
			skills = skills + @this.stringify_tech (0);
			return skills;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Inventory : LAIR.Stats {
		public Inventory (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, music, font, renderer);
		}
		public Inventory.Blocked (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Blocked (corner, Surfaces, music, font, renderer, tags);
		}
		public Inventory.Wall (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Wall (corner, Surfaces, music, font, renderer, tags);
		}
		public Inventory.Mobile (LAIR.AutoPoint corner, string aiScript, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (corner, aiScript, Surfaces, music, font, renderer, tags);
		}
		public Inventory.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base.Player (corner, Surfaces, music, font, renderer);
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Move : LAIR.Inventory {
		private string ai_func;
		public Move (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, music, font, renderer);
		}
		public Move.Wall (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Wall (corner, Surfaces, music, font, renderer, tags);
		}
		public Move.Mobile (LAIR.AutoPoint corner, string aiScript, string aiFunc, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags) {
			base.Mobile (corner, aiScript, Surfaces, music, font, renderer, tags);
			@this.ai_func = aiFunc;
			@this.set_stat_func ("stats_" + @this.get_ai_func ());
		}
		public Move.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base.Player (corner, Surfaces, music, font, renderer);
		}
		protected int quit () {
			return 0;
		}
		protected int stand_still () {
			@this.toggle_wobble_on ();
			return 1;
		}
		protected int step_down (Lua.LuaVM vm = @this.get_lua_vm ()) {
			@this.set_y (@this.get_y () + @this.Speed ());
			@this.toggle_wobble_on ();
			return 2;
		}
		protected int step_up (Lua.LuaVM vm = @this.get_lua_vm ()) {
			@this.set_y (@this.get_y () - @this.Speed ());
			@this.toggle_wobble_on ();
			return 3;
		}
		protected int step_right (Lua.LuaVM vm = @this.get_lua_vm ()) {
			@this.set_x (@this.get_x () + @this.Speed ());
			@this.toggle_wobble_on ();
			return 4;
		}
		protected int step_left (Lua.LuaVM vm = @this.get_lua_vm ()) {
			@this.set_x (@this.get_x () - @this.Speed ());
			@this.toggle_wobble_on ();
			return 5;
		}
		protected int swing_left (Lua.LuaVM vm = @this.get_lua_vm ()) {
			return 6;
		}
		protected int swing_right (Lua.LuaVM vm = @this.get_lua_vm ()) {
			return 7;
		}
		protected int mouse_move (int xx, int yy) {
			@this.set_cursor_position (xx, yy);
			return 8;
		}
		protected int show_my_stats () {
			@this.show_stats ();
			return 9;
		}
		protected int show_my_skills () {
			@this.show_skills ();
			return 10;
		}
		protected bool bounce (bool tl, bool tr, bool bl, bool br, SDL.Video.Rect evenout) {
			bool r = false;
			if (tl) {
				message ("move.vala:72: Collision detected, Top Left Corner");
				if (bl) {
					message ("move.vala:74:  and Bottom Left Corner");
					@this.set_x ((int) evenout.x + evenout.w);
					@this.step_right (@this.get_lua_vm ());
				} else {
					if (tr) {
						message ("move.vala:78:  and Top Right Corner");
						@this.set_y ((int) evenout.y + evenout.h);
						@this.step_down (@this.get_lua_vm ());
					} else {
						message ("move.vala:82: ");
						@this.set_x ((int) evenout.x + evenout.w);
						@this.set_y ((int) evenout.y + evenout.h);
						@this.step_right (@this.get_lua_vm ());
						@this.step_down (@this.get_lua_vm ());
					}
				}
				r = true;
			}
			if (tr) {
				message ("move.vala:91: Collision detected, Top Right Corner");
				if (br) {
					message ("move.vala:93:  and Bottom Right Corner");
					@this.set_x ((int) evenout.x - evenout.w);
					@this.step_left (@this.get_lua_vm ());
				} else {
					if (tl) {
						message ("move.vala:97:  and Top Left Corner");
						@this.set_y ((int) evenout.y + evenout.h);
						@this.step_down (@this.get_lua_vm ());
					} else {
						message ("move.vala:101: ");
						@this.set_x ((int) evenout.x - evenout.w);
						@this.set_y ((int) evenout.y + evenout.h);
						@this.step_left (@this.get_lua_vm ());
						@this.step_down (@this.get_lua_vm ());
					}
				}
				r = true;
			}
			if (bl) {
				message ("move.vala:110: Collision detected, Bottom Left Corner");
				if (tl) {
					message ("move.vala:112:  and Top Left Corner");
					@this.set_x ((int) evenout.x + evenout.w);
					@this.step_right (@this.get_lua_vm ());
				} else {
					if (br) {
						message ("move.vala:116:  and Bottom Right Corner");
						@this.set_y ((int) evenout.y - evenout.h);
						@this.step_up (@this.get_lua_vm ());
					} else {
						message ("move.vala:120: ");
						@this.set_x ((int) evenout.x + evenout.w);
						@this.set_y ((int) evenout.y - evenout.h);
						@this.step_right (@this.get_lua_vm ());
						@this.step_up (@this.get_lua_vm ());
					}
				}
				r = true;
			}
			if (br) {
				message ("move.vala:129: Collision detected, Bottom Right Corner");
				if (tr) {
					message ("move.vala:131: and Top Right Corner");
					@this.set_x ((int) evenout.x - evenout.w);
					@this.step_left (@this.get_lua_vm ());
				} else {
					if (bl) {
						message ("move.vala:135: and Bottom Left Corner");
						@this.set_y ((int) evenout.y - evenout.h);
						@this.step_up (@this.get_lua_vm ());
					} else {
						message ("move.vala:139: ");
						@this.set_x ((int) evenout.x - evenout.w);
						@this.set_y ((int) evenout.y - evenout.h);
						@this.step_left (@this.get_lua_vm ());
						@this.step_up (@this.get_lua_vm ());
					}
				}
				r = true;
			}
			return r;
		}
		protected string get_ai_func () {
			string? r;
			if (@this.ai_func == "") {
				r = "default()";
			} else {
				r = @this.ai_func;
			}
			return r;
		}
		private void ai_input () {
			@this.lua_do_function (@this.get_ai_func ());
			GLib.List<string>? aiDo = @this.get_lua_last_return ();
			@this.ai_input_compare (aiDo.nth_data (0));
		}
		private void ai_input_compare (string ai_do) {
			int t;
			switch (ai_do) {
			case "rotate()":
			{
				message ("move.vala:167: AI is turning");
				t = 7;
				break;
			}
			case "aim()":
			{
				message ("move.vala:171: AI is aiming");
				t = @this.swing_left (@this.get_lua_vm ());
				break;
			}
			case "fire()":
			{
				message ("move.vala:175: AI is firing");
				t = @this.swing_left (@this.get_lua_vm ());
				break;
			}
			case "action()":
			{
				message ("move.vala:179: AI is attempting");
				t = @this.swing_right (@this.get_lua_vm ());
				break;
			}
			case "throw()":
			{
				message ("move.vala:183: AI is throwing");
				t = @this.swing_right (@this.get_lua_vm ());
				break;
			}
			case "step_down()":
			{
				message ("move.vala:187: AI is stepping down");
				t = @this.step_down (@this.get_lua_vm ());
				break;
			}
			case "step_up()":
			{
				message ("move.vala:191: AI is stepping up");
				t = @this.step_up (@this.get_lua_vm ());
				break;
			}
			case "step_right()":
			{
				message ("move.vala:195: AI is stepping right");
				t = @this.step_right (@this.get_lua_vm ());
				break;
			}
			case "step_left()":
			{
				message ("move.vala:199: AI is stepping left");
				t = @this.step_left (@this.get_lua_vm ());
				break;
			}
			case "stand_still()":
			{
				message ("move.vala:203: AI is standing still");
				t = @this.stand_still ();
				break;
			}
			}
		}
		public int player_input () {
			int t = 1;
			SDL.Event e;
			message ("move.vala:211:      Player is taking a turn : ");
			loop {
				if (!Event.poll (out e) == 1) {
					break;
				}
				message ("move.vala:213:  Checking Event for Player Input");
				bool .50;
				bool .51;
				if (e.type == EventType.MOUSEMOTION) {
					.51 = true;
				} else {
					.51 = e.type == EventType.MOUSEBUTTONDOWN;
				}
				if (.51) {
					.50 = true;
				} else {
					.50 = e.type == EventType.MOUSEBUTTONUP;
				}
				if (.50) {
					int x = 0;
					int y = 0;
					Input.Cursor.get_state (ref x, ref y);
					bool inside = true;
					if (inside) {
						switch (e.type) {
						case EventType.MOUSEMOTION:
						{
							t = @this.mouse_move (x, y);
							break;
						}
						case EventType.MOUSEBUTTONDOWN:
						{
							t = @this.swing_left (@this.get_lua_vm ());
							break;
						}
						case EventType.MOUSEBUTTONUP:
						{
							t = @this.swing_left (@this.get_lua_vm ());
							break;
						}
						}
					}
				} else {
				}
			}
			unowned bool[]? current_key_states = Input.Keyboard.get_state ();
			int i = 0;
			if (current_key_states[Input.Scancode.ESCAPE]) {
				message ("move.vala:242: Player is Quitting");
				t = @this.quit ();
			}
			if (current_key_states[Input.Scancode.S]) {
				message ("move.vala:246: Player is moving down");
				t = @this.step_down (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.W]) {
				message ("move.vala:250: Player is moving up");
				t = @this.step_up (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.D]) {
				message ("move.vala:254: Player is moving right");
				t = @this.step_right (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.A]) {
				message ("move.vala:258: Player is moving left");
				t = @this.step_left (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.DOWN]) {
				message ("move.vala:262: Player is moving down");
				t = @this.step_down (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.UP]) {
				message ("move.vala:266: Player is moving up");
				t = @this.step_up (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.RIGHT]) {
				message ("move.vala:270: Player is moving right");
				t = @this.step_right (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.LEFT]) {
				message ("move.vala:274: Player is moving left");
				t = @this.step_left (@this.get_lua_vm ());
			}
			if (current_key_states[Input.Scancode.TAB]) {
				message ("move.vala:278: Player is viewing stats");
				t = @this.show_my_stats ();
			}
			if (current_key_states[Input.Scancode.CAPSLOCK]) {
				message ("move.vala:282: Player is viewing skills");
				t = @this.show_my_skills ();
			}
			return t;
		}
		public int run () {
			int r = 1;
			if (@this.is_player ()) {
				r = @this.player_input ();
			} else {
				@this.ai_input ();
			}
			return r;
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal class Entity : LAIR.Move {
		private GLib.List<string> nearby_interests;
		private int period;
		public Entity (LAIR.AutoPoint corner, string ai_script, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer) {
			base (corner, Surfaces, music, font, renderer);
		}
		public Entity.Floor (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, string new_name = "floor") {
			base.Floor (corner, Surfaces, music, font, renderer);
			@this.set_name (new_name);
			if (@this.get_name () == "floor") {
				@this.set_name ("floor");
			}
			@this.set_type ("floor");
		}
		public Entity.Wall (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags, string new_name = "particle") {
			base.Wall (corner, Surfaces, music, font, renderer, tags);
			@this.set_name (new_name);
			if (@this.get_name () == "particle") {
				@this.set_name ("particle");
			}
			@this.set_type ("particle");
			@this.set_type ("blocked");
		}
		public Entity.Mobile (LAIR.AutoPoint corner, string ai_script, string ai_func, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, GLib.List<string> tags, string new_name = "mobile") {
			base.Mobile (corner, ai_script, ai_func, Surfaces, music, font, renderer, tags);
			@this.set_name (new_name);
			if (@this.get_name () == "mobile") {
				@this.set_name ("mobile");
			}
			@this.set_type ("mobile");
			@this.set_type ("blocked");
		}
		public Entity.Player (LAIR.AutoPoint corner, GLib.List<weak SDL.Video.Surface*> Surfaces, GLib.List<weak SDLMixer.Music*> music, SDLTTF.Font* font, SDL.Video.Renderer? renderer, string new_name = "player") {
			base.Player (corner, Surfaces, music, font, renderer);
			@this.set_name (new_name);
			if (@this.get_name () == "player") {
				@this.set_name ("player");
			}
			@this.set_type ("player");
		}
		private bool in_range (LAIR.AutoPoint point, SDL.Video.Rect hitbox) {
			bool t = false;
			int xx = (int) hitbox.x + hitbox.w;
			int yy = (int) hitbox.y + hitbox.h;
			if (point.x () > hitbox.x) {
				if (point.x () < xx) {
					if (point.y () > hitbox.y) {
						if (point.y () < yy) {
							t = true;
						}
					}
				}
			}
			return t;
		}
		public bool detect_collisions (LAIR.Entity t) {
			bool r = false;
			assert (t != null);
			if (@this.get_block ()) {
				if (t.get_block ()) {
					LAIR.AutoPoint? tlc = new LAIR.AutoPoint (@this.get_hitbox ().x, @this.get_hitbox ().y);
					bool TLeftCorner = @this.in_range (tlc, t.get_hitbox ());
					LAIR.AutoPoint? trc = new LAIR.AutoPoint ((int) @this.get_hitbox ().x + @this.get_hitbox ().w, @this.get_hitbox ().y);
					bool TRightCorner = @this.in_range (trc, t.get_hitbox ());
					LAIR.AutoPoint? blc = new LAIR.AutoPoint (@this.get_hitbox ().x, (int) @this.get_hitbox ().y + @this.get_hitbox ().h);
					bool BLeftCorner = @this.in_range (blc, t.get_hitbox ());
					LAIR.AutoPoint? brc = new LAIR.AutoPoint ((int) @this.get_hitbox ().x + @this.get_hitbox ().w, (int) @this.get_hitbox ().y + @this.get_hitbox ().h);
					bool BRightCorner = @this.in_range (brc, t.get_hitbox ());
					r = @this.bounce (TLeftCorner, TRightCorner, BLeftCorner, BRightCorner, t.get_hitbox ());
				}
			}
			return r;
		}
		public bool detect_nearby_entities (LAIR.Entity test) {
			bool r = false;
			if (test.get_block ()) {
				LAIR.AutoPoint? tlc = new LAIR.AutoPoint (test.get_hitbox ().x, test.get_hitbox ().y);
				bool TLeftCorner = @this.in_range (tlc, @this.get_range_of_sight (0));
				LAIR.AutoPoint? trc = new LAIR.AutoPoint ((int) test.get_hitbox ().x + test.get_hitbox ().w, test.get_hitbox ().y);
				bool TRightCorner = @this.in_range (trc, @this.get_range_of_sight (0));
				LAIR.AutoPoint? blc = new LAIR.AutoPoint (test.get_hitbox ().x, (int) test.get_hitbox ().y + test.get_hitbox ().h);
				bool BLeftCorner = @this.in_range (blc, @this.get_range_of_sight (0));
				LAIR.AutoPoint? brc = new LAIR.AutoPoint ((int) test.get_hitbox ().x + test.get_hitbox ().w, (int) test.get_hitbox ().y + test.get_hitbox ().h);
				bool BRightCorner = @this.in_range (brc, @this.get_range_of_sight (0));
				if (TLeftCorner) {
					if (TRightCorner) {
						if (BLeftCorner) {
							if (BRightCorner) {
								if (@this.nearby_interests.length () < @this.Memory ()) {
									@this.nearby_interests.append (test.stringify_entity_details ());
									message ("entity.vala:110: is observing %s", test.stringify_entity_details ());
									r = true;
								}
							}
						}
					}
				}
			}
			if (r) {
				@this.push_interests ();
			}
			return r;
		}
		public void push_interests () {
			if (@this.nearby_interests != null) {
				@this.lua_push_strings_to_table ("vision", @this.nearby_interests.copy ());
				@this.lua_push_uint_to_table ("vision_length", "l", (int) @this.nearby_interests.length ());
				if (@this.period < @this.nearby_interests.length ()) {
					@this.period++;
				} else {
					@this.period = 0;
				}
				@this.lua_push_string_to_table ("self", @this.stringify_entity_details ());
				@this.lua_push_uint_to_table ("self_speed", "speed", @this.Speed ());
			}
		}
		public bool dedupe_and_shrink_nearby_entities () {
			GLib.List<string>? inj = new GLib.List<string> ();
			bool r = false;
			if (@this.nearby_interests.length () > @this.Memory ()) {
				@this.nearby_interests = inj.copy ();
				r = true;
			}
			return r;
		}
		public string stringify_entity_details () {
			string? details = @this.get_category () + @this.stringify_coordinates () + @this.stringify_skills (0) + @this.stringify_tags ();
			return details;
		}
		public void render (SDL.Video.Renderer renderer, LAIR.AutoPoint player_pos) {
			@this.render_copy (renderer, player_pos);
			@this.render_text (renderer, player_pos);
		}
	}
	[CCode (cheader_filename = "src/main.h")]
	internal static GLib.List<string> one_tag_to_list (string ip = "") {
		GLib.List<string>? r = new GLib.List<string> ();
		if (ip != "") {
			r.append (ip);
		}
		return r;
	}
}
[CCode (cheader_filename = "src/entity/anim.h")]
internal static int x_max;
[CCode (cheader_filename = "src/entity/anim.h")]
internal static int y_max;
